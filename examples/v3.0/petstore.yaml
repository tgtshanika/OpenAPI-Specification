openapi: 3.0.0
info:
  version: v1.2
  title: WSO2 API Manager - Admin
  description: >
    This document specifies a **RESTful API** for WSO2 **API Manager** - Admin
    Portal.

    Please see [full swagger
    definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml)
    of the API which is written using [swagger 2.0](http://swagger.io/)
    specification.
  contact:
    name: WSO2
    url: 'http://wso2.com/products/api-manager/'
    email: architecture@wso2.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /throttling/policies/application:
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_view'
        - None: []    
      summary: Get all Application Throttling Policies
      description: |
        Retrieves all existing application throttling policies.
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/If-None-Match'
        - $ref: '#/components/parameters/If-Modified-Since'
      tags:
        - Application Policy (Collection)
      responses:
        '200':
          description: |
            OK.
            Policies returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource. Used by caches, or in
                conditional requests (Will be supported in future).
              schema:
                type: string
            Last-Modified:
              description: >
                Date and time the resource has been modifed the last time.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationThrottlePolicyList'
        '304':
          description: >
            Not Modified.

            Empty body because the client has already the latest version of the
            requested resource (Will be supported in future).
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_manage'
      summary: Add an Application Throttling Policy
      description: >
        This operation can be used to add a new application level throttling
        policy.
      parameters:
        - $ref: '#/components/parameters/Content-Type'
      tags:
        - Application Policy (Collection)
      responses:
        '201':
          description: >
            Created.

            Successful response with the newly created object as entity in the
            body.

            Location header contains URL of newly created entity.
          headers:
            Location:
              description: |
                Location of the newly created Policy object.
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationThrottlePolicy'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '415':
          description: |
            Unsupported media type.
            The entity of the request was in a not supported format.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationThrottlePolicy'
        description: |
          Application level policy object that should to be added
        required: true
  '/throttling/policies/application/{policyId}':
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_view'
      summary: Get an Application Policy
      description: |
        Retrieves an Application Policy.
      parameters:
        - $ref: '#/components/parameters/policyId'
        - $ref: '#/components/parameters/If-None-Match'
        - $ref: '#/components/parameters/If-Modified-Since'
      tags:
        - Application Policy (Individual)
      responses:
        '200':
          description: |
            OK.
            Policy returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
            Last-Modified:
              description: >
                Date and time the resource has been modifed the last time.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationThrottlePolicy'
        '304':
          description: >
            Not Modified.

            Empty body because the client has already the latest version of the
            requested resource (Will be supported in future).
        '404':
          description: |
            Not Found.
            Requested Tier does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_manage'
      summary: Delete an Application Throttling policy
      description: |
        Deletes an Application level throttling policy.
      parameters:
        - $ref: '#/components/parameters/policyId'
        - $ref: '#/components/parameters/If-Match'
        - $ref: '#/components/parameters/If-Unmodified-Since'
      tags:
        - Application Policy (Individual)
      responses:
        '200':
          description: |
            OK.
            Resource successfully deleted.
        '404':
          description: |
            Not Found.
            Resource to be deleted does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: >
            Precondition Failed.

            The request has not been performed because one of the preconditions
            is not met (Will be supported in future).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_manage'
      summary: Update an Application Throttling policy
      description: >
        Updates an existing Application level throttling policy. Upon
        succesfull, you will receive the updated application policy as the
        response.
      parameters:
        - $ref: '#/components/parameters/policyId'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/If-Match'
        - $ref: '#/components/parameters/If-Unmodified-Since'
      tags:
        - Application Policy (Individual)
      responses:
        '200':
          description: |
            OK.
            Policy updated.
          headers:
            Location:
              description: |
                The URL of the newly created resource.
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional request.
              schema:
                type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional reuquests.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationThrottlePolicy'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            The resource to be updated does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: >
            Precondition Failed.

            The request has not been performed because one of the preconditions
            is not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationThrottlePolicy'
        description: |
          Policy object that needs to be modified
        required: true
  /policies/mediation:
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:mediation_policy_view'
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer 36a1644d-16c8-3f10-af2a-cedac82a6f21"
        https://localhost:9443/api/am/admin/v1/policies/mediation
      x-wso2-request: "GET https://localhost:9443/api/am/admin/v1/policies/mediation\r\nAuthorization: Bearer 36a1644d-16c8-3f10-af2a-cedac82a6f21"
      x-wso2-response: "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\r\n   \"count\": 13,\r\n   \"next\": null,\r\n   \"previous\": null,\r\n   \"list\":    [\r\n            {\r\n         \"name\": \"debug_json_fault\",\r\n         \"id\": \"563de8f3-dd1d-4ec7-afc2-d158c663ed34\",\r\n         \"type\": \"fault\"\r\n      },\r\n            {\r\n         \"name\": \"json_fault\",\r\n         \"id\": \"f9c36f4d-a2b6-41e7-b311-d358a47916be\",\r\n         \"type\": \"fault\"\r\n      },\r\n            {\r\n         \"name\": \"debug_json_fault2\",\r\n         \"id\": \"378169d3-6fd2-427f-b0db-0f378e89ccea\",\r\n         \"type\": \"fault\"\r\n      },\r\n            {\r\n         \"name\": \"json_to_xml_in_message\",\r\n         \"id\": \"3921225b-7918-4b95-a851-22c4e4e3e911\",\r\n         \"type\": \"in\"\r\n      },\r\n            {\r\n         \"name\": \"debug_in_flow\",\r\n         \"id\": \"2bc15f93-4455-4763-89b8-83600fb9d731\",\r\n         \"type\": \"in\"\r\n      },\r\n            {\r\n         \"name\": \"log_in_message\",\r\n         \"id\": \"4d287cca-76ab-44ca-b22e-919fc27c50e3\",\r\n         \"type\": \"in\"\r\n      },\r\n            {\r\n         \"name\": \"preserve_accept_header\",\r\n         \"id\": \"3776b215-b3bc-40b6-bdcb-06efa7de64be\",\r\n         \"type\": \"in\"\r\n      },\r\n            {\r\n         \"name\": \"xml_to_json_in_message\",\r\n         \"id\": \"50ac2002-769e-4f90-8549-6d0248dff7d2\",\r\n         \"type\": \"in\"\r\n      },\r\n            {\r\n         \"name\": \"xml_to_json_out_message\",\r\n         \"id\": \"2af75853-ed75-4d25-81aa-0ebbeca691ea\",\r\n         \"type\": \"out\"\r\n      },\r\n            {\r\n         \"name\": \"json_to_xml_out_message\",\r\n         \"id\": \"d9fa3ffc-f6b6-4171-ab97-eb44196cb66e\",\r\n         \"type\": \"out\"\r\n      },\r\n            {\r\n         \"name\": \"debug_out_flow\",\r\n         \"id\": \"260b7701-4071-46bd-9b66-900ac6fffed6\",\r\n         \"type\": \"out\"\r\n      },\r\n            {\r\n         \"name\": \"apply_accept_header\",\r\n         \"id\": \"15c17c2f-33e3-4c37-a262-04dfa49983a4\",\r\n         \"type\": \"out\"\r\n      },\r\n            {\r\n         \"name\": \"log_out_message\",\r\n         \"id\": \"d37dca41-c048-492a-82cf-9a2292c6fff0\",\r\n         \"type\": \"out\"\r\n      }\r\n   ]\r\n}"
      summary: |
        Get all global mediation policies
      description: >
        This operation provides you a list of available all global level
        mediation policies.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - name: query
          in: query
          description: '-Not supported yet-'
          schema:
            type: string
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/If-None-Match'
      tags:
        - Mediation Policy (Collection)
      responses:
        '200':
          description: |
            OK.
            List of mediation policies is returned.
          headers:
            Content-Type:
              description: The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource. Used by caches, or in
                conditional requests (Will be supported in future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mediationList'
        '304':
          description: >
            Not Modified.

            Empty body because the client has already the latest version of the
            requested resource (Will be supported in future).
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:mediation_policy_create'
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer 45c1e774-7d5a-3e2a-b76c-53f786efac6b"
        -H "Content-Type: application/json" -X POST -d @data.json
        "https://localhost:9443/api/am/admin/v1/policies/mediation"
      x-wso2-request: "POST https://localhost:9443/api/am/admin/v1/policies/mediation\r\nContent-Type: application/json\r\nAuthorization: Bearer 45c1e774-7d5a-3e2a-b76c-53f786efac6b\r\n\r\n{\r\n   \"name\": \"add_custom_header_fault\",\r\n   \"type\": \"fault\",\r\n   \"config\": \"<sequence xmlns=\\\"http://ws.apache.org/ns/synapse\\\" name=\\\"add_custom_header_fault\\\">\\n    <property name=\\\"CustomHeader\\\" scope=\\\"transport\\\" value=\\\"example\\\"/>\\n<\\/sequence>\\n\"\r\n}"
      x-wso2-response: "HTTP/1.1 201 Created\r\nLocation: https://localhost:9443/api/am/admin/v1/registry/resource/_system/governance/apimgt/customsequences/fault/add_custom_header_fault.xml\r\nContent-Type: application/json\r\n\r\n{\r\n   \"id\": \"2e5cebbb-e48c-4345-a912-1f0a2058aa05\",\r\n   \"name\": \"add_custom_header_fault\",\r\n   \"type\": \"fault\",\r\n   \"config\": \"<sequence xmlns=\\\"http://ws.apache.org/ns/synapse\\\" name=\\\"add_custom_header_fault\\\">\\n    <property name=\\\"CustomHeader\\\" scope=\\\"transport\\\" value=\\\"example\\\"/>\\n<\\/sequence>\\n\"\r\n}"
      summary: Add a global mediation policy
      description: |
        This operation can be used to add a new global mediation policy.
      parameters:
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/If-Match'
        - $ref: '#/components/parameters/If-Unmodified-Since'
      tags:
        - Mediation Policy (Collection)
      responses:
        '200':
          description: |
            OK.
            Mediation policy added successfully.
          headers:
            Location:
              description: |
                The URL of the uploaded thumbnail image of the API.
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
            Last-Modified:
              description: >
                Date and time the resource has been modifed the last time.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mediation'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            The resource to be updated does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: >
            Precondition Failed.

            The request has not been performed because one of the preconditions
            is not met (Will be supported in future).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Mediation'
        description: mediation policy to upload
        required: true
  '/policies/mediation/{mediationPolicyId}':
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:mediation_policy_view'
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer da3b0521-5adb-3edc-8ab9-295b4c34c809"
        https://localhost:9443/api/am/admin/v1/policies/mediation/2e5cebbb-e48c-4345-a912-1f0a2058aa05
      x-wso2-request: >-
        GET
        https://localhost:9443/api/am/admin/v1/policies/mediation/2e5cebbb-e48c-4345-a912-1f0a2058aa05

        Authorization: Bearer da3b0521-5adb-3edc-8ab9-295b4c34c809
      x-wso2-response: |-
        HTTP/1.1 200 OK
        Content-Type: application/json

        {
           "id": "2e5cebbb-e48c-4345-a912-1f0a2058aa05",
           "name": "add_custom_header_fault",
           "type": "fault",
           "config": "<sequence xmlns=\"http://ws.apache.org/ns/synapse\" name=\"add_custom_header_fault\">\n    <property name=\"CustomHeader\" scope=\"transport\" value=\"example\"/>\n<\/sequence>\n"
        }
      summary: Get a global mediation policy
      description: >
        This operation can be used to retrieve a particular global mediation
        policy.
      parameters:
        - $ref: '#/components/parameters/mediationPolicyId'
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/If-None-Match'
        - $ref: '#/components/parameters/If-Modified-Since'
      tags:
        - Mediation Policy (Individual)
      responses:
        '200':
          description: |
            OK.
            Mediation Policy returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
            Last-Modified:
              description: >
                Date and time the resource has been modifed the last time.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mediation'
        '304':
          description: >
            Not Modified.

            Empty body because the client has already the latest version of the
            requested resource (Will be supported in future).
        '404':
          description: |
            Not Found.
            Requested Document does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:mediation_policy_create'
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer fb2a0784-f60c-3276-8fde-5b0f70e61ecc"
        -X DELETE
        https://localhost:9443/api/am/admin/v1/policies/mediation/2c85844c-588f-4000-9ce5-f4cdc422cc8b
      x-wso2-request: >-
        DELETE
        https://localhost:9443/api/am/admin/v1/policies/mediation/2c85844c-588f-4000-9ce5-f4cdc422cc8b

        Content-Type: application/json

        Authorization: Bearer 58b3b072-74bb-3381-a213-ce1ca2857c2f
      x-wso2-response: HTTP/1.1 200 OK
      summary: Delete a global mediation policy
      description: >
        This operation can be used to delete an existing global mediation policy
        providing the Id of the mediation policy.
      parameters:
        - $ref: '#/components/parameters/mediationPolicyId'
        - $ref: '#/components/parameters/If-Match'
        - $ref: '#/components/parameters/If-Unmodified-Since'
      tags:
        - Mediation Policy (Individual)
      responses:
        '200':
          description: |
            OK.
            Mediation policy successfully deleted.
        '403':
          description: |
            Forbidden.
            The request must be conditional but no condition has been specified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            Resource to be deleted does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: >
            Precondition Failed.

            The request has not been performed because one of the preconditions
            is not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:mediation_policy_create'
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer 58b3b072-74bb-3381-a213-ce1ca2857c2f"
        -H "Content-Type: application/json" -X PUT -d @data.json
        https://localhost:9443/api/am/admin/v1/policies/mediation/8242d72c-b7d7-4b51-9098-d24bd4a5ea3a
      x-wso2-request: >
        PUT
        https://localhost:9443/api/am/admin/v1/policies/mediation/76cc38e4-f41a-457a-a987-3a677c290dc6

        Content-Type: application/json

        Authorization: Bearer 58b3b072-74bb-3381-a213-ce1ca2857c2f


        {
           "name": "add_custom_header_fault",
           "type": "fault",
           "config": "<sequence xmlns=\"http://ws.apache.org/ns/synapse\" name=\"add_custom_header_fault\">\n    <property name=\"CustomHeader\" scope=\"transport\" value=\"example\"/>\n<\/sequence>\n"
        }
      x-wso2-response: |-
        HTTP/1.1 200 OK
        Content-Type: application/json

        {
           "id": "8242d72c-b7d7-4b51-9098-d24bd4a5ea3a",
           "name": "add_custom_header_fault",
           "type": "fault",
           "config": "<sequence xmlns=\"http://ws.apache.org/ns/synapse\" name=\"add_custom_header_fault\">\n    <property name=\"CustomHeader\" scope=\"transport\" value=\"example\"/>\n<\/sequence>\n"
        }
      summary: Update a global mediation policy
      description: >
        This operation can be used to update an existing global mediation
        policy.
      parameters:
        - $ref: '#/components/parameters/mediationPolicyId'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/If-Match'
        - $ref: '#/components/parameters/If-Unmodified-Since'
      tags:
        - Mediation Policy (Individual)
      responses:
        '200':
          description: |
            OK.
            Successful response with updated mediation policy object
          headers:
            Location:
              description: |
                The URL of the newly created resource.
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource. Used by caches, or in
                conditional requests (Will be supported in future).
              schema:
                type: string
            Last-Modified:
              description: >
                Date and time the resource has been modifed the last time.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mediation'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: |
            Forbidden.
            The request must be conditional but no condition has been specified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            The resource to be updated does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: >
            Precondition Failed.

            The request has not been performed because one of the preconditions
            is not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Mediation'
        description: |
          Mediation policy object that needs to be added
        required: true
  /throttling/policies/subscription:
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_view'
      summary: Get all Subscription Throttling Policies
      description: >
        This operation can be used to retrieve all Subscription level throttling
        policies.
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/If-None-Match'
        - $ref: '#/components/parameters/If-Modified-Since'
      tags:
        - Subscription Policy (Collection)
      responses:
        '200':
          description: |
            OK.
            Policies returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
            Last-Modified:
              description: >
                Date and time the resource has been modifed the last time.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionThrottlePolicyList'
        '304':
          description: >
            Not Modified.

            Empty body because the client has already the latest version of the
            requested resource (Will be supported in future).
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_manage'
      summary: Add a Subscription Throttling Policy
      description: >
        This operation can be used to add a Subscription level throttling policy
        specifying the details of the policy in the payload.
      parameters:
        - $ref: '#/components/parameters/Content-Type'
      tags:
        - Subscription Policy (Collection)
      responses:
        '201':
          description: >
            Created.

            Successful response with the newly created object as entity in the
            body.

            Location header contains URL of newly created entity.
          headers:
            Location:
              description: |
                Location of the newly created Policy object.
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionThrottlePolicy'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '415':
          description: |
            Unsupported media type.
            The entity of the request was in a not supported format.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionThrottlePolicy'
        description: |
          Subscripion level policy object that should to be added
        required: true
  '/throttling/policies/subscription/{policyId}':
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_view'
      summary: Get a Subscription Policy
      description: >
        Retrieve a single subscription-level throttling policy. We should
        provide the Id of the policy as a path parameter.
      parameters:
        - $ref: '#/components/parameters/policyId'
        - $ref: '#/components/parameters/If-None-Match'
        - $ref: '#/components/parameters/If-Modified-Since'
      tags:
        - Subscription Policy (Individual)
      responses:
        '200':
          description: |
            OK.
            Policy returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
            Last-Modified:
              description: >
                Date and time the resource has been modifed the last time.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionThrottlePolicy'
        '304':
          description: >
            Not Modified.

            Empty body because the client has already the latest version of the
            requested resource (Will be supported in future).
        '404':
          description: |
            Not Found.
            Requested Policy does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_manage'
      summary: Delete a Subscription Policy
      description: >
        This operation can be used to delete a subscription-level throttling
        policy specifying the Id of the policy as a path paramter.
      parameters:
        - $ref: '#/components/parameters/policyId'
        - $ref: '#/components/parameters/If-Match'
        - $ref: '#/components/parameters/If-Unmodified-Since'
      tags:
        - Subscription Policy (Individual)
      responses:
        '200':
          description: |
            OK.
            Resource successfully deleted.
        '404':
          description: |
            Not Found.
            Resource to be deleted does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: >
            Precondition Failed.

            The request has not been performed because one of the preconditions
            is not met (Will be supported in future).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_manage'
      summary: Update a Subscription Policy
      description: |
        Updates an existing subscription-level throttling policy.
      parameters:
        - $ref: '#/components/parameters/policyId'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/If-Match'
        - $ref: '#/components/parameters/If-Unmodified-Since'
      tags:
        - Subscription Policy (Individual)
      responses:
        '200':
          description: |
            OK.
            Policy updated.
          headers:
            Location:
              description: |
                The URL of the newly created resource.
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
            Last-Modified:
              description: >
                Date and time the resource has been modifed the last time.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionThrottlePolicy'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            The resource to be updated does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: >
            Precondition Failed.

            The request has not been performed because one of the preconditions
            is not met (Will be supported in future).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionThrottlePolicy'
        description: |
          Policy object that needs to be modified
        required: true
  /throttling/policies/custom:
    get:
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122"
        https://localhost:9443/api/am/admin/v1/throttling/policies/custom
      x-wso2-request: |
        GET https://localhost:9443/api/am/admin/v1/throttling/policies/custom
        Authorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122
      x-wso2-response: "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\r\n  \"count\": 1,\r\n  \"list\": [\r\n    {\r\n      \"policyId\": \"33662a62-8db1-4d75-af08-afd63c6bd0b4\",\r\n      \"policyName\": \"custom1\",\r\n      \"displayName\": null,\r\n      \"description\": \"Allow 10 requests per minute for admin user\",\r\n      \"isDeployed\": true,\r\n      \"siddhiQuery\": \"FROM RequestStream\\nSELECT userId, ( userId == 'admin@carbon.super' ) AS isEligible , str:concat('admin@carbon.super','') as throttleKey\\nINSERT INTO EligibilityStream; \\n\\nFROM EligibilityStream[isEligible==true]#throttler:timeBatch(1 min) \\nSELECT throttleKey, (count(userId) >= 10) as isThrottled, expiryTimeStamp group by throttleKey \\nINSERT ALL EVENTS into ResultStream;\",\r\n      \"keyTemplate\": \"$userId\"\r\n    }\r\n  ]\r\n}"
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_view'
      summary: Get all Custom Rules
      description: |
        Retrieves all Custom Rules.

        **NOTE:**
        * Only super tenant users are allowed for this operation.
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/If-None-Match'
        - $ref: '#/components/parameters/If-Modified-Since'
      tags:
        - Custom Rules (Collection)
      responses:
        '200':
          description: |
            OK.
            Policies returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
            Last-Modified:
              description: >
                Date and time the resource has been modifed the last time.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRuleList'
        '304':
          description: >
            Not Modified.

            Empty body because the client has already the latest version of the
            requested resource (Will be supported in future).
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      x-wso2-curl: >-
        curl -k -X POST -H "Authorization: Bearer
        0d63e133-7ad6-3aeb-9ca9-9299e0708122" -H "Content-Type:
        application/json"
        https://localhost:9443/api/am/admin/v1/throttling/policies/custom -d
        @data.json
      x-wso2-request: "POST https://localhost:9443/api/am/admin/v1/throttling/policies/custom\r\nAuthorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122\r\nContent-Type: application/json\r\n\r\n{\r\n  \"policyName\": \"custom1\",\r\n  \"description\": \"Allow 10 requests per minute for admin user\",\r\n  \"siddhiQuery\": \"FROM RequestStream\\nSELECT userId, ( userId == 'admin@carbon.super' ) AS isEligible , str:concat('admin@carbon.super','') as throttleKey\\nINSERT INTO EligibilityStream; \\n\\nFROM EligibilityStream[isEligible==true]#throttler:timeBatch(1 min) \\nSELECT throttleKey, (count(userId) >= 10) as isThrottled, expiryTimeStamp group by throttleKey \\nINSERT ALL EVENTS into ResultStream;\",\r\n  \"keyTemplate\": \"$userId\"\r\n}"
      x-wso2-response: "HTTP/1.1 201 Created\r\nLocation: https://localhost:9443/api/am/admin/v1/throttling/policies/custom/22c71b7d-7013-4b80-bf7a-e86b471fb575\r\nContent-Type: application/json\r\n\r\n{\r\n  \"policyId\": \"22c71b7d-7013-4b80-bf7a-e86b471fb575\",\r\n  \"policyName\": \"custom1\",\r\n  \"displayName\": null,\r\n  \"description\": \"Allow 10 requests per minute for admin user\",\r\n  \"isDeployed\": true,\r\n  \"siddhiQuery\": \"FROM RequestStream\\nSELECT userId, ( userId == 'admin@carbon.super' ) AS isEligible , str:concat('admin@carbon.super','') as throttleKey\\nINSERT INTO EligibilityStream; \\n\\nFROM EligibilityStream[isEligible==true]#throttler:timeBatch(1 min) \\nSELECT throttleKey, (count(userId) >= 10) as isThrottled, expiryTimeStamp group by throttleKey \\nINSERT ALL EVENTS into ResultStream;\",\r\n  \"keyTemplate\": \"$userId\"\r\n}"
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_manage'
      summary: Add a Custom Rule
      description: |
        Adds a new Custom Rule.

        **NOTE:**
        * Only super tenant users are allowed for this operation.
      parameters:
        - $ref: '#/components/parameters/Content-Type'
      tags:
        - Custom Rules (Collection)
      responses:
        '201':
          description: >
            Created.

            Successful response with the newly created object as entity in the
            body.

            Location header contains URL of newly created entity.
          headers:
            Location:
              description: |
                Location of the newly created resource.
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRule'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '415':
          description: |
            Unsupported media type.
            The entity of the request was in a not supported format.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRule'
        description: |
          Custom Rule object that should to be added
        required: true
  '/throttling/policies/custom/{ruleId}':
    get:
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122"
        https://localhost:9443/api/am/admin/v1/throttling/policies/custom/33662a62-8db1-4d75-af08-afd63c6bd0b4
      x-wso2-request: >
        GET
        https://localhost:9443/api/am/admin/v1/throttling/policies/custom/33662a62-8db1-4d75-af08-afd63c6bd0b4

        Authorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122
      x-wso2-response: "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\r\n  \"policyId\": \"33662a62-8db1-4d75-af08-afd63c6bd0b4\",\r\n  \"policyName\": \"custom1\",\r\n  \"displayName\": null,\r\n  \"description\": \"Allow 10 requests per minute for admin user\",\r\n  \"isDeployed\": true,\r\n  \"siddhiQuery\": \"FROM RequestStream\\nSELECT userId, ( userId == 'admin@carbon.super' ) AS isEligible , str:concat('admin@carbon.super','') as throttleKey\\nINSERT INTO EligibilityStream; \\n\\nFROM EligibilityStream[isEligible==true]#throttler:timeBatch(1 min) \\nSELECT throttleKey, (count(userId) >= 10) as isThrottled, expiryTimeStamp group by throttleKey \\nINSERT ALL EVENTS into ResultStream;\",\r\n  \"keyTemplate\": \"$userId\"\r\n}"
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_view'
      summary: Get a Custom Rule
      description: >
        Retrieves a Custom Rule. We need to provide the policy Id as a path
        parameter.


        **NOTE:**

        * Only super tenant users are allowed for this operation.
      parameters:
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/If-None-Match'
        - $ref: '#/components/parameters/If-Modified-Since'
      tags:
        - Custom Rules (Individual)
      responses:
        '200':
          description: |
            OK.
            Policy returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
            Last-Modified:
              description: >
                Date and time the resource has been modifed the last time.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRule'
        '304':
          description: >
            Not Modified.

            Empty body because the client has already the latest version of the
            requested resource (Will be supported in future).
        '404':
          description: |
            Not Found.
            Requested Policy does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      x-wso2-curl: >-
        curl -k -X DELETE -H "Authorization: Bearer
        0d63e133-7ad6-3aeb-9ca9-9299e0708122"
        https://localhost:9443/api/am/admin/v1/throttling/policies/custom/33662a62-8db1-4d75-af08-afd63c6bd0b4
      x-wso2-request: >
        DELETE
        https://localhost:9443/api/am/admin/v1/throttling/policies/custom/33662a62-8db1-4d75-af08-afd63c6bd0b4

        Authorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122
      x-wso2-response: HTTP/1.1 200 OK
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_manage'
      summary: Delete a Custom Rule
      description: >
        Delete a Custom Rule. We need to provide the Id of the policy as a path
        parameter.


        **NOTE:**

        * Only super tenant users are allowed for this operation.
      parameters:
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/If-Match'
        - $ref: '#/components/parameters/If-Unmodified-Since'
      tags:
        - Custom Rules (Individual)
      responses:
        '200':
          description: |
            OK.
            Resource successfully deleted.
        '404':
          description: |
            Not Found.
            Resource to be deleted does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: >
            Precondition Failed.

            The request has not been performed because one of the preconditions
            is not met (Will be supported in future).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      x-wso2-curl: >-
        curl -k -X PUT -H "Authorization: Bearer
        0d63e133-7ad6-3aeb-9ca9-9299e0708122" -H "Content-Type:
        application/json"
        https://localhost:9443/api/am/admin/v1/throttling/policies/custom/33662a62-8db1-4d75-af08-afd63c6bd0b4
        -d @data.json
      x-wso2-request: "PUT https://localhost:9443/api/am/admin/v1/throttling/policies/custom/33662a62-8db1-4d75-af08-afd63c6bd0b4\r\nAuthorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122\r\nContent-Type: application/json\r\n\r\n{\r\n  \"policyName\": \"custom1\",\r\n  \"description\": \"Allow 10 requests per minute for admin user\",\r\n  \"siddhiQuery\": \"FROM RequestStream\\nSELECT userId, ( userId == 'admin@carbon.super' ) AS isEligible , str:concat('admin@carbon.super','') as throttleKey\\nINSERT INTO EligibilityStream; \\n\\nFROM EligibilityStream[isEligible==true]#throttler:timeBatch(1 min) \\nSELECT throttleKey, (count(userId) >= 10) as isThrottled, expiryTimeStamp group by throttleKey \\nINSERT ALL EVENTS into ResultStream;\",\r\n  \"keyTemplate\": \"$userId\"\r\n}"
      x-wso2-response: "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\r\n  \"policyId\": \"33662a62-8db1-4d75-af08-afd63c6bd0b4\",\r\n  \"policyName\": \"custom1\",\r\n  \"displayName\": null,\r\n  \"description\": \"Allow 10 requests per minute for admin user\",\r\n  \"isDeployed\": true,\r\n  \"siddhiQuery\": \"FROM RequestStream\\nSELECT userId, ( userId == 'admin@carbon.super' ) AS isEligible , str:concat('admin@carbon.super','') as throttleKey\\nINSERT INTO EligibilityStream; \\n\\nFROM EligibilityStream[isEligible==true]#throttler:timeBatch(1 min) \\nSELECT throttleKey, (count(userId) >= 10) as isThrottled, expiryTimeStamp group by throttleKey \\nINSERT ALL EVENTS into ResultStream;\",\r\n  \"keyTemplate\": \"$userId\"\r\n}"
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_manage'
      summary: Update a Custom Rule
      description: |
        Updates an existing Custom Rule.

        **NOTE:**
        * Only super tenant users are allowed for this operation.
      parameters:
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/If-Match'
        - $ref: '#/components/parameters/If-Unmodified-Since'
      tags:
        - Custom Rules (Individual)
      responses:
        '200':
          description: |
            OK.
            Policy updated.
          headers:
            Location:
              description: |
                The URL of the newly created resource.
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
            Last-Modified:
              description: >
                Date and time the resource has been modifed the last time.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRule'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            The resource to be updated does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: >
            Precondition Failed.

            The request has not been performed because one of the preconditions
            is not met (Will be supported in future).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRule'
        description: |
          Policy object that needs to be modified
        required: true
  /throttling/policies/advanced:
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_view'
      summary: Get all Advanced throttling policies.
      description: |
        Retrieves all existing Advanced level throttling policies.
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/If-None-Match'
        - $ref: '#/components/parameters/If-Modified-Since'
      tags:
        - Advanced Policy (Collection)
      responses:
        '200':
          description: |
            OK.
            Policies returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
            Last-Modified:
              description: >
                Date and time the resource has been modifed the last time.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedThrottlePolicyList'
        '304':
          description: >
            Not Modified.

            Empty body because the client has already the latest version of the
            requested resource (Will be supported in future).
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_manage'
      summary: Add an Advanced Throttling Policy
      description: |
        Add a new Advanced level throttling policy.
      parameters:
        - $ref: '#/components/parameters/Content-Type'
      tags:
        - Advanced Policy (Collection)
      responses:
        '201':
          description: >
            Created.

            Successful response with the newly created object as entity in the
            body.

            Location header contains URL of newly created entity.
          headers:
            Location:
              description: |
                Location of the newly created Advanced Throttling Policy.
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedThrottlePolicy'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '415':
          description: |
            Unsupported media type.
            The entity of the request was in a not supported format.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdvancedThrottlePolicy'
        description: |
          Advanced level policy object that should to be added
        required: true
  '/throttling/policies/advanced/{policyId}':
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_view'
      summary: Get an Advanced Policy
      description: |
        Retrieves an Advanced Policy.
      parameters:
        - $ref: '#/components/parameters/policyId'
        - $ref: '#/components/parameters/If-None-Match'
        - $ref: '#/components/parameters/If-Modified-Since'
      tags:
        - Advanced Policy (Individual)
      responses:
        '200':
          description: |
            OK.
            Policy returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
            Last-Modified:
              description: >
                Date and time the resource has been modifed the last time.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedThrottlePolicy'
        '304':
          description: >
            Not Modified.

            Empty body because the client has already the latest version of the
            requested resource (Will be supported in future).
        '404':
          description: |
            Not Found.
            Requested Policy does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_manage'
      summary: Delete an Advanced Throttling Policy
      description: |
        Deletes an Advanced level throttling policy.
      parameters:
        - $ref: '#/components/parameters/policyId'
        - $ref: '#/components/parameters/If-Match'
        - $ref: '#/components/parameters/If-Unmodified-Since'
      tags:
        - Advanced Policy (Individual)
      responses:
        '200':
          description: |
            OK.
            Resource successfully deleted.
        '404':
          description: |
            Not Found.
            Resource to be deleted does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: >
            Precondition Failed.

            The request has not been performed because one of the preconditions
            is not met (Will be supported in future).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tier_manage'
      summary: Update an Advanced Throttling Policy
      description: |
        Updates an existing Advanced level throttling policy.
      parameters:
        - $ref: '#/components/parameters/policyId'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/If-Match'
        - $ref: '#/components/parameters/If-Unmodified-Since'
      tags:
        - Advanced Policy (Individual)
      responses:
        '200':
          description: |
            OK.
            Policy updated.
          headers:
            Location:
              description: |
                The URL of the newly created resource.
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
            Last-Modified:
              description: >
                Date and time the resource has been modifed the last time.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedThrottlePolicy'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            The resource to be updated does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: >
            Precondition Failed.

            The request has not been performed because one of the preconditions
            is not met (Will be supported in future).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdvancedThrottlePolicy'
        description: |
          Policy object that needs to be modified
        required: true
  /throttling/blacklist:
    get:
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer a1e3951b-a15c-3d79-a15b-99f1d612843e"
        https://localhost:9443/api/am/admin/v1/throttling/blacklist
      x-wso2-request: |
        GET https://localhost:9443/api/am/admin/v1/throttling/blacklist
        Authorization: Bearer a1e3951b-a15c-3d79-a15b-99f1d612843e
      x-wso2-response: "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\r\n  \"count\": 3,\r\n  \"list\": [\r\n    {\r\n      \"conditionId\": \"0b65b686-841b-48eb-b4c2-427d24584d71\",\r\n      \"conditionType\": \"IP\",\r\n      \"conditionValue\": \"127.0.0.332\",\r\n      \"conditionStatus\": \"true\"\r\n    },\r\n    {\r\n      \"conditionId\": \"3baa990c-f90b-4e3e-9db7-f29ee7f46f48\",\r\n      \"conditionType\": \"IP\",\r\n      \"conditionValue\": \"localhost\",\r\n      \"conditionStatus\": \"false\"\r\n    },\r\n    {\r\n      \"conditionId\": \"b513eb68-69e8-4c32-92cf-852c101363cf\",\r\n      \"conditionType\": \"IP\",\r\n      \"conditionValue\": \"10.100.7.77\",\r\n      \"conditionStatus\": \"true\"\r\n    }\r\n  ]\r\n}"
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:bl_view'
      summary: Get all blocking condtions
      description: |
        Retrieves all existing blocking condtions.
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/If-None-Match'
        - $ref: '#/components/parameters/If-Modified-Since'
      tags:
        - Blacklist (Collection)
      responses:
        '200':
          description: |
            OK.
            Blocking conditions returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
            Last-Modified:
              description: >
                Date and time the resource has been modifed the last time.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockingConditionList'
        '304':
          description: >
            Not Modified.

            Empty body because the client has already the latest version of the
            requested resource (Will be supported in future).
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      x-wso2-curl: >-
        curl -k -X POST -H "Authorization: Bearer
        a1e3951b-a15c-3d79-a15b-99f1d612843e" -H "Content-Type:
        application/json"
        https://localhost:9443/api/am/admin/v1/throttling/blacklist
      x-wso2-request: "POST https://localhost:9443/api/am/admin/v1/throttling/blacklist\r\nAuthorization: Bearer a1e3951b-a15c-3d79-a15b-99f1d612843e\r\nContent-Type: application/json\r\n\r\n{\r\n   \"conditionType\": \"IP\",\r\n   \"conditionValue\": \"10.100.7.77\",\r\n      \"conditionStatus\": \"false\"\r\n    }\r\n"
      x-wso2-response: "HTTP/1.1 201 Created\r\nLocation: https://localhost:9443/api/am/admin/v1/throttling/blacklist/b513eb68-69e8-4c32-92cf-852c101363cf\r\nContent-Type: application/json\r\n\r\n{\r\n  \"conditionId\": \"b513eb68-69e8-4c32-92cf-852c101363cf\",\r\n  \"conditionType\": \"IP\",\r\n  \"conditionValue\": \"10.100.7.77\",\r\n      \"conditionStatus\": \"false\"\r\n    }"
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:bl_manage'
      summary: Add a Blocking condition
      description: |
        Adds a new Blocking condition.
      parameters:
        - $ref: '#/components/parameters/Content-Type'
      tags:
        - Blacklist (Collection)
      responses:
        '201':
          description: >
            Created.

            Successful response with the newly created object as entity in the
            body.

            Location header contains URL of newly created entity.
          headers:
            Location:
              description: |
                Location of the newly created resource.
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockingCondition'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '415':
          description: |
            Unsupported media type.
            The entity of the request was in a not supported format.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockingCondition'
        description: |
          Blocking condition object that should to be added
        required: true
  '/throttling/blacklist/{conditionId}':
    get:
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer a1e3951b-a15c-3d79-a15b-99f1d612843e"
        https://localhost:9443/api/am/admin/v1/throttling/blacklist/b513eb68-69e8-4c32-92cf-852c101363c
      x-wso2-request: >
        GET
        https://localhost:9443/api/am/admin/v1/throttling/blacklist/b513eb68-69e8-4c32-92cf-852c101363c

        Authorization: Bearer a1e3951b-a15c-3d79-a15b-99f1d612843e
      x-wso2-response: "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\r\n  \"conditionId\": \"b513eb68-69e8-4c32-92cf-852c101363cf\",\r\n  \"conditionType\": \"IP\",\r\n  \"conditionValue\": \"10.100.7.77\"\r\n}"
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:bl_view'
      summary: Get a Blocking Condition
      description: |
        Retrieves a Blocking Condition providing the condition Id
      parameters:
        - $ref: '#/components/parameters/conditionId'
        - $ref: '#/components/parameters/If-None-Match'
        - $ref: '#/components/parameters/If-Modified-Since'
      tags:
        - Blacklist (Individual)
      responses:
        '200':
          description: |
            OK.
            Condition returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
            ETag:
              description: >
                Entity Tag of the response resource.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
            Last-Modified:
              description: >
                Date and time the resource has been modifed the last time.

                Used by caches, or in conditional requests (Will be supported in
                future).
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockingCondition'
        '304':
          description: >
            Not Modified.

            Empty body because the client has already the latest version of the
            requested resource (Will be supported in future).
        '404':
          description: |
            Not Found.
            Requested Condition does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      x-wso2-curl: >-
        curl -k -X DELETE -H "Authorization: Bearer
        a1e3951b-a15c-3d79-a15b-99f1d612843e" -H "Content-Type:
        application/json"
        https://localhost:9443/api/am/admin/v1/throttling/blacklist/b513eb68-69e8-4c32-92cf-852c101363cf
      x-wso2-request: >
        DELETE
        https://localhost:9443/api/am/admin/v1/throttling/blacklist/b513eb68-69e8-4c32-92cf-852c101363cf

        Authorization: Bearer a1e3951b-a15c-3d79-a15b-99f1d612843e
      x-wso2-response: HTTP/1.1 200 OK
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:bl_manage'
      summary: Delete a Blocking condition
      description: |
        Deletes an existing Blocking condition
      parameters:
        - $ref: '#/components/parameters/conditionId'
        - $ref: '#/components/parameters/If-Match'
        - $ref: '#/components/parameters/If-Unmodified-Since'
      tags:
        - Blacklist (Individual)
      responses:
        '200':
          description: |
            OK.
            Resource successfully deleted.
        '404':
          description: |
            Not Found.
            Resource to be deleted does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: >
            Precondition Failed.

            The request has not been performed because one of the preconditions
            is not met (Will be supported in future).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:bl_manage'
      x-wso2-curl: >-
        curl -k -X PATCH -H "Authorization: Bearer
        0d63e133-7ad6-3aeb-9ca9-9299e0708122" -H "Content-Type:
        application/json"
        https://localhost:9443/api/am/admin/v1/throttling/blacklist/b513eb68-69e8-4c32-92cf-852c101363cf
        -d @data.json
      x-wso2-request: "PUT https://localhost:9443/api/am/admin/v1/throttling/blacklist/b513eb68-69e8-4c32-92cf-852c101363cf\r\nAuthorization: Bearer a1e3951b-a15c-3d79-a15b-99f1d612843e\r\nContent-Type: application/json\r\n\r\n{\r\n    \"conditionStatus\": \"true\"\r\n    }\r\n"
      x-wso2-response: "HTTP/1.1 200 Ok\r\nContent-Type: application/json\r\n\r\n{\r\n  \"conditionId\": \"b513eb68-69e8-4c32-92cf-852c101363cf\",\r\n  \"conditionType\": \"IP\",\r\n  \"conditionValue\": \"10.100.7.77\",\r\n      \"conditionStatus\": \"true\"\r\n    }"
      summary: Update a blocking condition
      description: |
        Update a blocking condition by Id
      parameters:
        - $ref: '#/components/parameters/conditionId'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/If-Match'
        - $ref: '#/components/parameters/If-Unmodified-Since'
      tags:
        - Blacklist (Individual)
      responses:
        '200':
          description: |
            OK.
            Resource successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockingCondition'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            Resource to be updated does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockingConditionStatus'
        description: |
          Blocking condition with updated status
        required: true
  /applications:
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:app_owner_change'
            - 'apim:app_import_export'
      x-wso2-request: |
        GET https://localhost:9443/api/am/admin/v1/applications
        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8"
        "https://localhost:9443/api/am/admin/v1/applications"
      x-wso2-response: |-
        HTTP/1.1 200 OK
        Content-Type: application/json

        {
           "previous": "",
           "list":    [
                    {
                 "groupId": "",
                 "owner": "admin",
                   "applicationId": "367a2361-8db5-4140-8133-c6c8dc7fa0c4",
                 "status": "APPROVED",
                 "name": "app1"
              },
                    {
                 "groupId": "",
                 "owner": "admin",
                     "applicationId": "896658a0-b4ee-4535-bbfa-806c894a4015",
                  "status": "APPROVED",
                 "name": "DefaultApplication"
              }
           ],
           "count": 2,
           "next": ""
        }
      summary: |
        Retrieve/Search applications
      description: >
        This operation can be used to retrieve list of applications that is
        belonged to the given user, If no user

        is provided then the application for the user associated with the
        provided access token will be returned.
      parameters:
        - $ref: '#/components/parameters/user'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/If-None-Match'
        - name: name
          in: query
          description: |
            Application Name
          required: false
          schema:
            type: string
        - name: tenantDomain
          in: query
          description: >
            Tenant domain of the applications to get. This has to be specified
            only if require to get applications of

            another tenant other than the requester's tenant. So, if not
            specified, the default will be set as the

            requester's tenant domain. This cross tenant Application access is
            allowed only for super tenant admin

            users only at a migration process.
          required: false
          schema:
            type: string
      tags:
        - Application (Collection)
      responses:
        '200':
          description: |
            OK.
            Application list returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationList'
        '304':
          description: >
            Not Modified.

            Empty body because the client has already the latest version of the
            requested resource (Will be supported in future).
        '400':
          description: |
            Bad Request.
            Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/applications/{applicationId}':
    delete:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:app_import_export'
      x-examples:
        $ref: 'docs/examples/alerts/applications.yaml#/delete'
      summary: |
        Remove an application
      description: |
        This operation can be used to remove an application specifying its id.
      parameters:
        - $ref: '#/components/parameters/applicationId'
        - $ref: '#/components/parameters/If-Match'
      tags:
        - Applications
      responses:
        '200':
          description: |
            OK.
            Resource successfully deleted.
        '202':
          description: |
            Accepted.
            The request has been accepted.
          headers:
            Location:
              description: |
                Location of the existing Application.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'
        '404':
          description: |
            Not Found.
            Resource to be deleted does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: >
            Precondition Failed.

            The request has not been performed because one of the preconditions
            is not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/applications/{applicationId}/change-owner':
    post:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:app_owner_change'
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8"
        -X POST
        "https://localhost:9443/api/am/admin/v1/applications/890a4f4d-09eb-4877-a323-57f6ce2ed79b/change-owner?owner=admin"
      x-wso2-request: >
        POST
        https://localhost:9443/api/am/admin/v1/apis/change-owner?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&action=Publish

        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-response: HTTP/1.1 200 OK
      summary: Change Application Owner
      description: >
        This operation is used to change the owner of an Application.

        In order to change the owner of an application, we need to pass the new
        application owner as a query parameter
      parameters:
        - name: owner
          in: query
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/applicationId'
      tags:
        - Application
      responses:
        '200':
          description: |
            OK.
            Application owner changed successfully.
        '400':
          description: |
            Bad Request.
            Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            Requested Application does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '412':
          description: >
            Precondition Failed.

            The request has not been performed because one of the preconditions
            is not met.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /export/applications:
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:app_import_export'
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8"
        -X GET
        https://localhost:9443/api/am/admin/v1/export/applications?appName=sampleApp&appOwner=admin
        > admin_sampleApp.zip
      x-wso2-request: >
        GET
        https://localhost:9443/api/am/admin/v1/export/applications?appName=sampleApp&appOwner=admin

        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-response: |-
        HTTP/1.1 200 OK
         Connection: keep-alive
          Content-Disposition: attachment; filename="exported-application.zip"
          Content-Type: application/zip
      summary: Export an Application
      description: >
        This operation can be used to export the details of a particular
        Application as a zip file.
      parameters:
        - name: appName
          in: query
          description: |
            Application Name
          required: true
          schema:
            type: string
        - name: appOwner
          in: query
          description: |
            Owner of the Application
          required: true
          schema:
            type: string
        - name: withKeys
          in: query
          description: |
            Export application keys
          required: false
          schema:
            type: boolean
      tags:
        - Application (Individual)
      responses:
        '200':
          description: |
            OK.
            Export Successful.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
                format: binary
            application/zip:
              schema:
                type: string
                format: binary
        '400':
          description: |
            Bad Request.
            Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/zip:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            Requested Application does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/zip:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/zip:
              schema:
                $ref: '#/components/schemas/Error'
  /import/applications:
    post:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:app_import_export'
      x-wso2-curl: >-
        curl -k -F "file=@exported.zip" -X POST -H "Authorization: Bearer
        ae4eae22-3f65-387b-a171-d37eaa366fa8"
        https://localhost:9443/api/am/admin/v1/import/applications
      x-wso2-request: |
        POST https://localhost:9443/api/am/admin/v1/import/applications
        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-response: >-
        HTTP/1.1 201 Created

        Location:
        https://localhost:9443/api/am/admin/v1/applications/c30f3a6e-ffa4-4ae7-afce-224d1f820524

        Content-Type: application/json


        {
           "groupId": "",
           "callbackUrl": "http://my.server.com/callback",
           "owner": "admin",
           "applicationId": "c30f3a6e-ffa4-4ae7-afce-224d1f820524",
           "status": "APPROVED",
           "name": "sampleapp" 
        }
      summary: Import an Application
      description: |
        This operation can be used to import an Application.
      parameters:
        - name: preserveOwner
          in: query
          description: |
            Preserve Original Creator of the Application
          required: false
          schema:
            type: boolean
        - name: skipSubscriptions
          in: query
          description: |
            Skip importing Subscriptions of the Application
          required: false
          schema:
            type: boolean
        - name: appOwner
          in: query
          description: |
            Expected Owner of the Application in the Import Environment
          schema:
            type: string
        - name: skipApplicationKeys
          in: query
          description: |
            Skip importing Keys of the Application
          required: false
          schema:
            type: boolean
        - name: update
          in: query
          description: |
            Update if application exists
          required: false
          schema:
            type: boolean
      tags:
        - Application (Individual)
      responses:
        '200':
          description: >
            OK.

            Successful response with the updated object information as entity in
            the body.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationInfo'
        '207':
          description: >
            Multi Status.

            Partially successful response with skipped APIs information object
            as entity in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIInfoList'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: >
                    Zip archive consisting of exported Application
                    Configuration.
                  type: string
                  format: binary
              required:
                - file
  /import/api:
    post:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:api_import_export'
      x-wso2-curl: >-
        curl -k -F "file=@exported.zip" -X POST -H "Authorization: Bearer
        ae4eae22-3f65-387b-a171-d37eaa366fa8"
        https://localhost:9443/api/am/admin/v1/import/api?preserveProvider=false&overwrite=false
      x-wso2-request: |
        POST https://localhost:9443/api/am/admin/v1/import/apis
        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-response: |-
        HTTP/1.1 200 OK
        API imported successfully.
      summary: Import an API
      description: |
        This operation can be used to import an API.
      parameters:
        - name: preserveProvider
          in: query
          description: >
            Preserve Original Provider of the API. This is the user choice to
            keep or replace the API provider.
          required: false
          schema:
            type: boolean
        - name: overwrite
          in: query
          description: >
            Whether to update the API or not. This is used when updating already
            existing APIs.
          required: false
          schema:
            type: boolean
      tags:
        - API (Individual)
      responses:
        '200':
          description: |
            Created.
            API Imported Successfully.
        '403':
          description: |
            Forbidden
            Not Authorized to import.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            Requested API to update not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: |
            Conflict.
            API to import already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: |
            Internal Server Error.
            Error in importing API.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: |
                    Zip archive consisting on exported api configuration
                  type: string
                  format: binary
              required:
                - file
  /export/api:
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:api_import_export'
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8"
        -X GET
        https://localhost:9443/api/am/admin/v1/export/api?name=PizzaShackAPI&version=1.0.0&providerName=admin
        > exportAPI.zip
      x-wso2-request: >
        GET
        https://localhost:9443/api/am/admin/v1/export/api?name=SampleAPI&version=1.0.0&providerName=admin

        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-response: |-
        HTTP/1.1 200 OK
         Connection: keep-alive
          Content-Disposition: attachment; filename="exported-api.zip"
          Content-Type: application/zip
      summary: Export an API
      description: >
        This operation can be used to export the details of a particular API as
        a zip file.
      parameters:
        - name: name
          in: query
          description: |
            API Name
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: |
            Version of the API
          required: true
          schema:
            type: string
        - name: providerName
          in: query
          description: |
            Provider name of the API
          required: false
          schema:
            type: string
        - name: format
          in: query
          description: |
            Format of output documents. Can be YAML or JSON.
          required: false
          schema:
            type: string
            enum:
              - JSON
              - YAML
            default: JSON
        - name: preserveStatus
          in: query
          description: |
            Preserve API Status on export
          required: false
          schema:
            type: boolean
      tags:
        - API (Individual)
      responses:
        '200':
          description: |
            OK.
            Export Successful.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '404':
          description: |
            Not Found.
            Requested API does not exist.
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: |
            Internal Server Error.
            Error in exporting API.
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/Error'
  /import/api-product:
    post:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:api_product_import_export'
      x-wso2-curl: >-
        curl -k -F "file=@exported.zip" -X POST -H "Authorization: Bearer
        ae4eae22-3f65-387b-a171-d37eaa366fa8"
        https://localhost:9443/api/am/admin/v1/import/api-product?preserveProvider=false&overwriteAPIs=false&overwriteAPIProduct=false
      x-wso2-request: |
        POST https://localhost:9443/api/am/admin/v1/import/api-product
        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-response: |-
        HTTP/1.1 200 OK
        API Product imported successfully.
      summary: Import an API Product
      description: |
        This operation can be used to import an API Product.
      parameters:
        - name: preserveProvider
          in: query
          description: >
            Preserve Original Provider of the API Product. This is the user
            choice to keep or replace the API Product provider.
          required: false
          schema:
            type: boolean
        - name: importAPIs
          in: query
          description: |
            Whether to import the dependent APIs or not.
          required: false
          schema:
            type: boolean
        - name: overwriteAPIProduct
          in: query
          description: >
            Whether to update the API Product or not. This is used when updating
            already existing API Products.
          required: false
          schema:
            type: boolean
        - name: overwriteAPIs
          in: query
          description: >
            Whether to update the dependent APIs or not. This is used when
            updating already existing dependent APIs of an API Product.
          required: false
          schema:
            type: boolean
      tags:
        - API Product (Individual)
      responses:
        '200':
          description: |
            Created.
            API Product Imported Successfully.
        '403':
          description: |
            Forbidden
            Not Authorized to import.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            Requested API Product to update not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: |
            Conflict.
            API Product to import already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: |
            Internal Server Error.
            Error in importing API Product.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: |
                    Zip archive consisting on exported API Product configuration
                  type: string
                  format: binary
              required:
                - file
  /export/api-product:
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:api_product_import_export'
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8"
        -X GET
        https://localhost:9443/api/am/admin/v0.17/export/api-product?name=SampleAPIProduct&version=1.0.0&providerName=admin
        > exportAPIProduct.zip
      x-wso2-request: >
        GET
        https://localhost:9443/api/am/admin/v0.17/export/api-product?name=SampleAPIProduct&version=1.0.0&providerName=admin

        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-response: |-
        HTTP/1.1 200 OK
         Connection: keep-alive
          Content-Disposition: attachment; filename="exported-api-product.zip"
          Content-Type: application/zip
      summary: Export an API Product
      description: >
        This operation can be used to export the details of a particular API
        Product as a zip file.
      parameters:
        - name: name
          in: query
          description: |
            API Product Name
          required: true
          schema:
            type: string
        - name: version
          in: query
          description: |
            Version of the API Product
          required: true
          schema:
            type: string
        - name: providerName
          in: query
          description: |
            Provider name of the API Product
          required: false
          schema:
            type: string
        - name: format
          in: query
          description: |
            Format of output documents. Can be YAML or JSON.
          required: false
          schema:
            type: string
            enum:
              - JSON
              - YAML
        - name: preserveStatus
          in: query
          description: |
            Preserve API Product Status on export
          required: false
          schema:
            type: boolean
      tags:
        - API Product (Individual)
      responses:
        '200':
          description: |
            OK.
            Export Successful.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '404':
          description: |
            Not Found.
            Requested API does not exist.
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: |
            Internal Server Error.
            Error in exporting API Product.
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/Error'
  /labels:
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:label_read'
      x-wso2-request: |
        GET https://localhost:9443/api/am/admin/v1/labels
        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8"
        "https://localhost:9443/api/am/admin/v1/labels"
      x-wso2-response: "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\r\n  \"count\": 1,\r\n  \"list\": [\r\n\t{\r\n\t\"id\":\"d7cf8523-9180-4255-84fa-6cb171c1f779\",\r\n\t\"name\":\"internal\",\r\n\t\"description\":\"label used for internal purpose\",\r\n\t\"accessUrls\":[\r\n\t  \"https://localhost:9095\"\r\n         ]\r\n       }\r\n   ]\r\n}"
      summary: Get all registered Labels
      description: |
        Get all registered Labels
      tags:
        - Label Collection
      responses:
        '200':
          description: |
            OK.
            Labels returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelList'
    post:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:label_manage'
      x-wso2-curl: >-
        curl -k -X POST -H "Authorization: Bearer
        0d63e133-7ad6-3aeb-9ca9-9299e0708122" -H "Content-Type:
        application/json" https://apis.wso2.com/api/am/admin/v1/labels -d
        @data.json
      x-wso2-request: "POST https://localhost:9443/api/am/admin/v1/labels\r\nAuthorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122\r\nContent-Type: application/json\r\n\r\n   {\r\n       \"name\":\"internal\",\r\n\t\"description\":\"label used for internal purpose\",\r\n\t\"accessUrls\":[\r\n\t  \"https://localhost:9095\"\r\n         ]\r\n     }"
      x-wso2-response: "HTTP/1.1 201 Created\r\nContent-Type: application/json\r\n\r\n{\r\n\t\"id\":\"d7cf8523-9180-4255-84fa-6cb171c1f779\",\r\n\t\"name\":\"internal\",\r\n\t\"description\":\"label used for internal purpose\",\r\n\t\"accessUrls\":[\r\n\t  \"https://localhost:9095\"\r\n         ]\r\n       }\r\n   ]\r\n}"
      summary: Add a Label
      description: |
        Add a new gateway Label
      tags:
        - Label
      responses:
        '201':
          description: >
            Created.

            Successful response with the newly created object as entity in the
            body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        description: |
          Label object that should to be added
        required: true
  /bot-detection-data:
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:bot_data'
      operationId: getBotDetectionData
      summary: |
        Get all bot detected data
      description: |
        Get all bot detected data
      responses:
        '200':
          description: |
            OK.
            Bot detected data returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotDetectionDataList'
        '404':
          description: |
            Not Found.
            Analytics Not Enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/labels/{labelId}':
    put:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:label_manage'
      x-wso2-curl: >-
        curl -k -X PUT -H "Authorization: Bearer
        0d63e133-7ad6-3aeb-9ca9-9299e0708122" -H "Content-Type:
        application/json"
        https://localhost:9443/api/am/admin/v1/labels/d7cf8523-9180-4255-84fa-6cb171c1f779
        -d @data.json
      x-wso2-request: "PUT https://localhost:9443/api/am/admin/v1/labels/d7cf8523-9180-4255-84fa-6cb171c1f779\r\nAuthorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122\r\nContent-Type: application/json\r\n\r\n   {\r\n       \"name\":\"update_internal\",\r\n\t\"description\":\"Updated label used for internal purpose\",\r\n\t\"accessUrls\":[\r\n\t  \"https://localhost:9095\"\r\n         ]\r\n     }"
      x-wso2-response: "HTTP/1.1 200 Ok\r\nContent-Type: application/json\r\n\r\n{\r\n\t\"id\":\"d7cf8523-9180-4255-84fa-6cb171c1f779\",\r\n\t\"name\":\"updated_internal\",\r\n\t\"description\":\"Updated label used for internal purpose\",\r\n\t\"accessUrls\":[\r\n\t  \"https://localhost:9095\"\r\n         ]\r\n       }\r\n   ]\r\n}"
      summary: Update a Label
      description: |
        Update a Label by label Id
      parameters:
        - $ref: '#/components/parameters/labelId'
      tags:
        - Label
      responses:
        '200':
          description: |
            OK.
            Label updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            The resource to be updated does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
        description: |
          Label object with updated information
        required: true
    delete:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:label_manage'
      x-wso2-response: HTTP/1.1 200 OK
      summary: Delete a Label
      description: |
        Delete a Label by label Id
      parameters:
        - $ref: '#/components/parameters/labelId'
        - $ref: '#/components/parameters/If-Match'
        - $ref: '#/components/parameters/If-Unmodified-Since'
      tags:
        - Label
      responses:
        '200':
          description: |
            OK.
            Label successfully deleted.
        '404':
          description: |
            Not Found.
            Label to be deleted does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /monetization/publish-usage:
    post:
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer 0c6439fd-9b16-3c2e-be6e-1086e0b9aa93"
        -X POST -H "Content-Type: application/json"
        https://localhost:9443/api/am/admin/v1/monetization/publish-usage
      x-wso2-request: "POST https://localhost:9443/api/am/admin/v1/monetization/publish-usage\r\nAuthorization: Bearer 0c6439fd-9b16-3c2e-be6e-1086e0b9aa93\r\nContent-Type: application/json"
      x-wso2-response: "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\r\n\"status\":\"successfull\",\r\n\"message\":\"Records published successfully\"\r\n}"
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:monetization_usage_publish'
      summary: Publish Usage Records
      description: |
        Publish Usage Records of Monetized APIs
      tags:
        - Monetization (Collection)
      responses:
        '200':
          description: Usage records successfully published.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishStatus'
        '202':
          description: Request is sucessfully accepted for processing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishStatus'
        '404':
          description: |
            Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishStatus'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishStatus'
  /monetization/publish-usage/status:
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:monetization_usage_publish'
      x-wso2-request: >
        GET
        https://localhost:9443/api/am/admin/v1/monetization/publish-usage/status

        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8"
        "https://localhost:9443/api/am/admin/v1/monetization/publish-usage/status"
      x-wso2-response: "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\r\n  \"state\": \"RUNNING\",\r\n ,\"status\":\"SUCCESSFULL\",\r\n, \"started time\":\"12345678056L\",\r\n, \"last published time\":\"12345678056L\",\r\n}"
      summary: Get the status of Monetization usage publisher
      description: |
        Get the status of Monetization usage publisher
      tags:
        - Monetization (Collection)
      responses:
        '200':
          description: |
            OK.
            Status returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonetizationUsagePublishInfo'
  /workflows:
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:api_workflow_view'
      x-wso2-request: |
        GET https://localhost:9443/api/am/admin/v1/workflows
        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8"
        "https://localhost:9443/api/am/admin/v1/workflows"
      x-wso2-response: |-
        HTTP/1.1 200 OK
        Content-Type: application/json

        {
           "previous": "",
           "list":    [
                    {
            "WF_TYPE": "AM_APPLICATION_CREATION",
                 "WF_STATUS": "APPROVED",
                 "WF_CREATED_TIME": "  2020-02-10 09:33:34.476"
            "WF_UPDATED_TIME": "  2020-02-10 09:33:34.476"
            "WF_STATUS_DESC": "  Approve workflow request"
           "TENANT_ID": "-1234",
          "TENANT_DOMAIN": "carbon.super",
          "WF_EXTERNAL_REFERENCE": "5871244b-d6f3-466e-8995-8accd1e64303",
          "PAYLOAD": "7b2263616c6c4261636b55524c22",
         },
          {
                 "WF_ID": "",
                 "WF_REFERENCE": "ABBA",
                   "WF_TYPE": "AM_APPLICATION_CREATION",
                 "WF_STATUS": "APPROVED",
                 "WF_CREATED_TIME": "  2020-01-10 09:32:34.476"
            "WF_UPDATED_TIME": "  2020-03-12 09:34:34.476"
            "WF_STATUS_DESC": "  Approve workflow request"
           "TENANT_ID": "-1234",
          "TENANT_DOMAIN": "carbon.super",
          "WF_EXTERNAL_REFERENCE": "5871244b-d6f3-466e-8922-8accd1e64303",
          "PAYLOAD": "7b226170694e616d65223a2253616",
         }          
      summary: |
        Retrieve All pending workflow processes
      description: >
        This operation can be used to retrieve list of workflow pending
        processes.
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/If-None-Match'
        - name: workflowType
          in: query
          description: >
            We need to show the values of each workflow process separately .for
            that we use workflow type.

            Workflow type can be AM_APPLICATION_CREATION,
            AM_SUBSCRIPTION_CREATION,   AM_USER_SIGNUP,
            AM_APPLICATION_REGISTRATION_PRODUCTION,
            AM_APPLICATION_REGISTRATION_SANDBOX.
          required: false
          schema:
            type: string
            enum:
              - AM_APPLICATION_CREATION
              - AM_SUBSCRIPTION_CREATION
              - AM_USER_SIGNUP
              - AM_APPLICATION_REGISTRATION_PRODUCTION
              - AM_APPLICATION_REGISTRATION_SANDBOX
              - AM_SUBSCRIPTION_DELETION
              - AM_APPLICATION_DELETION
              - AM_API_STATE
      tags:
        - Workflow (Collection)
      responses:
        '200':
          description: |
            OK.
            Workflow pendding process list returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowList'
        '304':
          description: >
            Not Modified.

            Empty body because the client has already the latest version of the
            requested resource (Will be supported in future).
        '400':
          description: |
            Bad Request.
            Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            Requested user does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/workflows/{externalWorkflowRef}':
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:api_workflow_view'
      x-wso2-curl: >-
        curl
        https://localhost:9443/api/am/admin/v1/workflows/c43a325c-260b-4302-81cb-768eafaa3aed
      x-wso2-curl-tenant: >-
        curl -k -H "X-WSO2-Tenant:test.com"
        https://localhost:9443/api/am/admin/v0.17/workflows/c43a325c-260b-4302-81cb-768eafaa3aed
      x-wso2-request: >
        GET
        https://localhost:9443/api/am/admin/v1/workflows/c43a325c-260b-4302-81cb-768eafaa3aed
      x-wso2-response: |-
        HTTP/1.1 200 OK
        Content-Type: application/json

        {
           "previous": "",
           "list":    [
                    {
                         "WF_TYPE": "AM_APPLICATION_CREATION",
                 "WF_STATUS": "APPROVED",
                 "WF_CREATED_TIME": "  2020-02-10 09:33:34.476"
            "WF_UPDATED_TIME": "  2020-02-10 09:33:34.476"
            "WF_STATUS_DESC": "  Approve workflow request"
           "TENANT_ID": "-1234",
          "TENANT_DOMAIN": "carbon.super",
          "WF_EXTERNAL_REFERENCE": "5871244b-d6f3-466e-8995-8accd1e64303",
          "PAYLOAD": "7b2263616c6c4261636b55524c22",
         } 
      summary: >
        Get details of a the pending workflow request according to the External
        Workflow Reference.
      description: >
        Using this operation, you can retrieve complete details of a pending
        workflow request that either belongs to application creation,
        application subscription, application registration, api state change,
        user self sign up.. You need to provide the External_Workflow_Reference
        of the workflow Request to retrive it.
      parameters:
        - name: externalWorkflowRef
          in: path
          description: >
            from the externel workflow reference we decide what is the the
            pending request that the are requesting.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/If-None-Match'
      tags:
        - Workflows (Individual)
      responses:
        '200':
          description: |
            OK.
            Requested Workflow Pending is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowInfo'
        '304':
          description: >
            Not Modified.

            Empty body because the client has already the latest version of the
            requested resource.
        '404':
          description: |
            Not Found.
            Requested workflow pendding process does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /workflows/update-workflow-status:
    post:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:api_workflow_approve'
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8"
        -H "Content-Type: application/json" -X POST -d @data.json
        "https://localhost:9443/api/am/publisher/v1/workflows/update-workflow-status?workflowReferenceId=56e3a170-a7a7-45f8-b051-7e43a58a67e1"
      x-wso2-request: >-
        POST
        https://localhost:9443/api/am/publisher/v1/workflows/update-workflow-status?workflowReferenceId=56e3a170-a7a7-45f8-b051-7e43a58a67e1

        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8

        Content-Type: application/json


        {
           "status" : "APPROVED",
           "attributes" : {
              "apiCurrentState": "Created",
              "apiLCAction": "Publish",
              "apiName":"APIname",
              "apiVersion" : "1.0.0",
              "apiProvider" : "admin",
              "invoker": "admin"
           }
        }
      x-wso2-response: HTTP/1.1 200 OK
      summary: Update workflow status
      description: |
        This operation can be used to approve or reject a workflow task.
      parameters:
        - $ref: '#/components/parameters/workflowReferenceId-Q'
      tags:
        - Workflows (Individual)
      responses:
        '200':
          description: |
            OK.
            Workflow request information is returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            Workflow for the given reference is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workflow'
        description: |
          Workflow event that need to be updated
        required: true
  '/tenant-info/{username}':
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tenantInfo'
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8"
        -H "Content-Type: application/json" -X GET
        "https://localhost:9443/api/am/admin/v1/tenant-info/john/info"
      x-wso2-request: |-
        GET https://localhost:9443/api/am/admin/v1/tenant-info/john
        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
        Content-Type: application/json

        {
           "tenantDomain" : "carbon.super",
           "tenantId" : -1234 
        }
      x-wso2-response: HTTP/1.1 200 OK
      summary: |
        Get tenant id of the user
      description: |
        This operation is to get tenant id of the provided user
      operationId: getTenantInfoByUsername
      parameters:
        - name: username
          description: |
            The state represents the current state of the tenant

            Supported states are [ active, inactive]
          in: path
          required: true
          schema:
            type: string
            default: john
      tags:
        - Tenants
      responses:
        '200':
          description: |
            OK.
            Tenant id of the user retrieved.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantInfo'
        '404':
          description: |
            Not Found.
            Requested user does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/custom-urls/{tenantDomain}':
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tenantInfo'
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8"
        -H "Content-Type: application/json" -X GET
        "https://localhost:9443/api/am/admin/v1/custom-url/foo.com"
      x-wso2-request: |-
        GET https://localhost:9443/api/am/admin/v1/custom-url/foo.com
        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
        Content-Type: application/json

        {
           "tenantDomain" : "foo.com",
        }
      x-wso2-response: HTTP/1.1 200 OK
      summary: |
        Get custom-url info of a tenant domain
      description: >
        This operation is to get custom-url information of the provided
        tenant-domain
      operationId: getCustomUrlInfoByTenantDomain
      parameters:
        - name: tenantDomain
          description: |
            The tenant domain name.
          in: path
          required: true
          schema:
            type: string
      tags:
        - Tenants
      responses:
        '200':
          description: |
            OK.
            Custom url info of the tenant is retrieved.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUrlInfo'
        '404':
          description: |
            Not Found.
            Requested user does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api-categories:
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:admin_operations'
      x-wso2-request: |
        GET https://localhost:9443/api/am/admin/v1/api-categories
        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-curl: >-
        curl -k -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8"
        "https://localhost:9443/api/am/admin/v1/api-categories"
      x-wso2-response: "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\r\n   \"count\":1,\r\n   \"list\":[\r\n      {\r\n         \"id\":\"463e2c9f-5e99-43c3-a66e-de7e0f367373\",\r\n         \"name\":\"Finance\",\r\n         \"description\":\"Finance related APIS\"\r\n      \"numberOfAPIs\":1\r\n}\r\n   ]\r\n      }\r\n   ]\r\n}"
      summary: Get all API categories
      description: |
        Get all API categories
      tags:
        - API Category (Collection)
      responses:
        '200':
          description: |
            OK.
            Categories returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APICategoryList'
    post:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:admin_operations'
      x-wso2-curl: >-
        curl -k -X POST -H "Authorization: Bearer
        0d63e133-7ad6-3aeb-9ca9-9299e0708122" -H "Content-Type:
        application/json" https://apis.wso2.com/api/am/admin/v1/api-categories
        -d @data.json
      x-wso2-request: "POST https://localhost:9443/api/am/admin/v1/api-categories\r\nAuthorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122\r\nContent-Type: application/json\r\n\r\n -d  {\r\n         \"name\":\"Finance\",\r\n         \"description\":\"Finance related APIS\"\r\n }"
      x-wso2-response: "HTTP/1.1 201 Created\r\nContent-Type: application/json\r\n\r\n{\r\n   \"count\":1,\r\n   \"list\":[\r\n      {\r\n         \"id\":\"463e2c9f-5e99-43c3-a66e-de7e0f367373\",\r\n         \"name\":\"Finance\",\r\n         \"description\":\"Finance related APIS\"\r\n }"
      summary: Add a new API Category
      description: |
        Add a new API Category
      tags:
        - API Category (Individual)
      responses:
        '201':
          description: >
            Created.

            Successful response with the newly created object as entity in the
            body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APICategory'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APICategory'
        description: |
          API Category object that should to be added
        required: true
  '/api-categories/{apiCategoryId}':
    put:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:admin_operations'
      x-wso2-curl: >-
        curl -k -X PUT -H "Authorization: Bearer
        0d63e133-7ad6-3aeb-9ca9-9299e0708122" -H "Content-Type:
        application/json"
        https://localhost:9443/api/am/admin/v1/api-categories/d7cf8523-9180-4255-84fa-6cb171c1f779
        -d @data.json
      x-wso2-request: "PUT https://localhost:9443/api/am/admin/v1/api-categories/d7cf8523-9180-4255-84fa-6cb171c1f779\r\nAuthorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122\r\nContent-Type: application/json\r\n\r\n   {\r\n       \"name\":\"update_internal\",\r\n\t\"description\":\"Updated label used for internal purpose\",\r\n\t\"accessUrls\":[\r\n\t  \"https://localhost:9095\"\r\n         ]\r\n     }"
      x-wso2-response: "HTTP/1.1 200 Ok\r\nContent-Type: application/json\r\n\r\n{\r\n   \"count\":1,\r\n   \"list\":[\r\n      {\r\n         \"id\":\"463e2c9f-5e99-43c3-a66e-de7e0f367373\",\r\n         \"name\":\"Finance\",\r\n         \"description\":\"Finance related APIS\"\r\n      }\r\n   ]\r\n}"
      summary: Update an API Category
      description: |
        Update an API Category by category Id
      parameters:
        - $ref: '#/components/parameters/apiCategoryId'
      tags:
        - API Category (Individual)
      responses:
        '200':
          description: |
            OK.
            Label updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APICategory'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            The resource to be updated does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APICategory'
        description: |
          API Category object with updated information
        required: true
    delete:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:admin_operations'
      x-wso2-response: HTTP/1.1 200 OK
      summary: Delete an API Category
      description: |
        Delete an API Category by API Category Id
      parameters:
        - $ref: '#/components/parameters/apiCategoryId'
        - $ref: '#/components/parameters/If-Match'
        - $ref: '#/components/parameters/If-Unmodified-Since'
      tags:
        - API Category (Individual)
      responses:
        '200':
          description: |
            OK.
            API Category successfully deleted.
        '404':
          description: |
            Not Found.
            API Category to be deleted does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /settings:
    get:
      summary: Retreive admin settings
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:admin_settings'
      description: |
        Retreive admin settings
      tags:
        - Settings
      responses:
        '200':
          description: |
            OK.
            Settings returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        '404':
          description: |
            Not Found.
            Requested Settings does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /alert-types:
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:admin_alert_manage'
      operationId: getAdminAlertTypes
      summary: |
        Get the list of admin alert types.
      description: >
        This operation is used to get the list of supportd alert types for the
        apim admin dashboard
      tags:
        - Alerts
      responses:
        '200':
          description: |
            OK.
            The list of admin alert types are returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertTypesList'
        '500':
          description: |
            Internal Server Error.
            An internal server error occurred while retrieving the alert types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /alert-subscriptions:
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:admin_alert_manage'
      summary: |
        Get the list of API Admin alert types subscribed by the user.
      operationId: getSubscribedAlertTypes
      description: >
        This operation is used to get the list of subscribed alert types by the
        user.
      tags:
        - Alert Subscriptions
      responses:
        '200':
          description: |
            OK.
            The list of subscribed alert types are returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertsSubscription'
        '500':
          description: |
            Internal Server Error
            An error occurred while retrieving subscribed alert types by user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:admin_alert_manage'
      summary: |
        Subscribe to an admin alert.
      operationId: subscribeToAlerts
      description: |
        This operation is used to subscribe to admin alerts
      tags:
        - Alert Subscriptions
      responses:
        '200':
          description: |
            OK.
            Successful response with the newly subscribed alerts.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertsSubscription'
        '400':
          description: |
            Bad Request.
            Invalid Request or request validation failure.
        '500':
          description: |
            Internal Server Error
            An internal server error occurred while subscribing to alerts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertsSubscription'
        description: The alerts list and the email list to subscribe.
        required: true
    delete:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:admin_alert_manage'
      summary: |
        Unsubscribe user from all the admin alert types.
      operationId: unsubscribeAllAlerts
      description: >
        This operation is used to unsubscribe the respective user from all the
        admin alert types.
      tags:
        - Alert Subscriptions
      responses:
        '200':
          description: |
            OK.
            The user is unsubscribed from the alerts successfully.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
        '500':
          description: |
            Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /alert-subscriptions/bot-detection:
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:admin_alert_manage'
      operationId: getBotDetectionAlertSubscriptions
      summary: |
        Get the list of subscriptions for bot detection
      description: >
        Get the list of subscriptions which are subscribed to receive email
        alerts for bot detection
      tags:
        - Bot Detection Alert Subscriptions
      responses:
        '200':
          description: |
            OK.
            The list of bot detection alert subscriptions are returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotDetectionAlertSubscriptionList'
        '500':
          description: >
            Internal Server Error.

            An error occurred while retrieving bot detection alert
            subscriptions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:admin_alert_manage'
      operationId: subscribeForBotDetectionAlerts
      summary: Subscribe for bot detection alerts
      description: |
        Register a subscription for bot detection alerts
      tags:
        - Bot Detection Alert Subscriptions
      responses:
        '200':
          description: |
            OK.
            Bot detection alert subscription is registered successfully.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotDetectionAlertSubscription'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: |
            Internal Server Error.
            An error occurred while adding a bot detection subscription.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotDetectionAlertSubscription'
        description: |
          The email to register to receive bot detection alerts
        required: true
  '/alert-subscriptions/bot-detection/{uuid}':
    delete:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:admin_alert_manage'
      operationId: unsubscribeFromBotDetectionAlerts
      summary: Unsubscribe from bot detection alerts.
      description: |
        Delete a subscription from bot detection alerts.
      parameters:
        - in: path
          name: uuid
          required: true
          description: uuid of the subscription
          schema:
            type: string
      tags:
        - Bot Detection Alert Subscriptions
      responses:
        '200':
          description: |
            OK.
            Bot detection alert subscription is deleted successfully.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
        '404':
          description: |
            Not Found.
            Resource to be deleted does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: |
            Internal Server Error
            An error occurred while deleting a bot detection subscription.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/system-scopes/{scopeName}':
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:scope_manage'
      x-wso2-curl: >-
        curl -k -X GET
        "https://localhost:9443/api/am/admin/v1/system-scopes/YXBpbTpzdWJzY3JpYmU?username=john"
        -H "accept: application/json" -H "Authorization: Bearer
        8e8edc50-4a70-3fec-af00-ce08097012ab
      x-wso2-request: >-
        GET
        https://localhost:9443/api/am/admin/v1/system-scopes/Base64urlEncode(apim:subscribe)?username=john
        Authorization: Bearer 8e8edc50-4a70-3fec-af00-ce08097012ab
      x-wso2-response: |
        {
          "name":"apim:subscribe"  
        }
      operationId: systemScopesScopeNameGet
      summary: Retrieve scopes for a particular user
      description: |
        This operation will return the scope list of particular user
        In order to get it, we need to pass the userId as a query parameter
      parameters:
        - name: username
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/scopeName'
      tags:
        - System Scopes
      responses:
        '200':
          description: |
            OK.
            Particular scope exists for the given user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeSettings'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            Requested user does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /system-scopes:
    get:
      security:
        - OAuth2Security:
            - apim:scope_manage
            - apim:admin
      operationId: systemScopesGet
      summary: |
        Get the list of role scope mapping.
      description: >
        This operation is used to get the list of role scope mapping from
        tenant-conf for the apim admin dashboard
      tags:
        - System Scopes
      responses:
        '200':
          description: |
            OK.
            The list of role scope mappings are returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeList'
        '500':
          description: >
            Internal Server Error.

            An internal server error occurred while retrieving the role scope
            mapping.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:scope_manage
      summary: |
        Update Roles For Scope
      operationId: updateRolesForScope
      description: |
        This operation is used to update the roles for all scopes
      tags:
        - System Scopes
      responses:
        '200':
          description: |
            OK.
            Successful response with the newly added roles.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeList'
        '400':
          description: |
            Bad Request.
            Invalid Request or request validation failure.
        '500':
          description: |
            Internal Server Error
            An internal server error occurred while updating the roles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScopeList'
        description: |
          The system scopes list
        required: true
  /system-scopes/role-aliases:
    get:
      summary: Retrieve role alias mappings
      security:
        - OAuth2Security:
            - apim:admin
            - apim:scope_manage
      description: |
        This operation can be used to retreive role alias mapping
      tags:
        - System Scopes
      responses:
        '200':
          description: |
            OK.
            The list of role mappings are returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAliasList'
        '404':
          description: |
            Not Found.
            Requested alias does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Add a new role alias
      security:
        - OAuth2Security:
            - 'apim:scope_manage'
            - 'apim:admin'
      description: >
        This operation can be used to add a new role alias mapping for system
        scope roles
      tags:
        - System Scopes
      responses:
        '200':
          description: |
            OK.
            Role mapping alias returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAliasList'
        '400':
          description: |
            Bad Request.
            Invalid Request or request validation failure.
        '500':
          description: |
            Internal Server Error
            An internal server error occurred while updating the roles.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAliasList'
        description: role-alias mapping
        required: true
  /tenant-theme:
    #-----------------------------------------------------
    # Export Tenant Theme
    #-----------------------------------------------------
    get:
      security:
        - OAuth2Security: [apim:admin]
      operationId: exportTenantTheme
      summary: Export a DevPortal Tenant Theme
      description: >
        This operation can be used to export a DevPortal tenant theme as a zip
        file.
      tags:
        - Tenant Theme
      responses:
        '200':
          description: |
            OK.
            Tenant Theme Exported Successfully.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '403':
          description: |
            Forbidden.
            Not Authorized to export.
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            Requested tenant theme does not exist.
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: |
            Internal Server Error.
            Error in exporting tenant theme.
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:tenant_theme_manage'
      operationId: importTenantTheme
      summary: Import a DevPortal Tenant Theme
      description: |
        This operation can be used to import a DevPortal tenant theme.
      tags:
        - Tenant Theme
      responses:
        '200':
          description: |
            Ok.
            Tenant Theme Imported Successfully.
        '403':
          description: |
            Forbidden.
            Not Authorized to import.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '413':
          description: |
            Payload Too Large.
            Tenant Theme file size exceeds the allowed limit.
        '500':
          description: |
            Internal Server Error.
            Error in importing Theme.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: |
                    Zip archive consisting of tenant theme configuration
                  type: string
                  format: binary
              required:
                - file
  /key-managers:
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:admin_operations'
      summary: Get all Key managers
      description: |
        Get all Key managers
      tags:
        - Key Manager (Collection)
      responses:
        '200':
          description: |
            OK.
            KeyManagers returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyManagerList'
    post:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:admin_operations'
      summary: Add a new API Key Manager
      description: |
        Add a new API Key Manager
      tags:
        - Key Manager (Collection)
      responses:
        '201':
          description: >
            Created.

            Successful response with the newly created object as entity in the
            body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyManager'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyManager'
        description: |
          Key Manager object that should to be added
        required: true
  '/key-managers/{keyManagerId}':
    get:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:admin_operations'
      summary: Get a Key Manager Configuration
      description: >
        Retrieve a single Key Manager Configuration. We should provide the Id of
        the KeyManager as a path parameter.
      parameters:
        - $ref: '#/components/parameters/keyManagerId'
      tags:
        - Key Manager (Individual)
      responses:
        '200':
          description: |
            OK.
            KeyManager Configuration returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyManager'
        '404':
          description: |
            Not Found.
            Requested KeyManager Configuration does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: |
            Not Acceptable.
            The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:admin_operations'
      summary: Update a Key Manager
      description: |
        Update a Key Manager by keyManager id
      parameters:
        - $ref: '#/components/parameters/keyManagerId'
      tags:
        - Key Manager (Individual)
      responses:
        '200':
          description: |
            OK.
            Label updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyManager'
        '400':
          description: |
            Bad Request.
            Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |
            Not Found.
            The resource to be updated does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyManager'
        description: |
          Key Manager object with updated information
        required: true
    delete:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:admin_operations'
      summary: Delete a Key Manager
      description: |
        Delete a Key Manager by keyManager id
      parameters:
        - $ref: '#/components/parameters/keyManagerId'
      tags:
        - Key Manager (Individual)
      responses:
        '200':
          description: |
            OK.
            Key Manager successfully deleted.
        '404':
          description: |
            Not Found.
            Key Manager to be deleted does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /key-managers/discover:
    post:
      security:
        - OAuth2Security:
            - 'apim:admin'
            - 'apim:admin_operations'
      summary: Retrieve Well-known information from KeyManager Well-known Endpoint.
      description: |
        Get all Key managers
      tags:
        - Key Manager (Collection)
      responses:
        '200':
          description: |
            OK.
            KeyManagers returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyManagerWellKnownResponse'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                url:
                  description: Well-Known Endpoint
                  type: string
                type:
                  description: |
                    Key Manager Type
                  type: string
                  default: false
servers:
  - url: 'https://apis.wso2.com/api/am/admin/v1'
components:
  parameters:
    username:
      name: username
      in: query
      description: |
        username of the new application owner
      required: true
      schema:
        type: string
    scopeName:
      name: scopeName
      in: path
      description: |
        scope name to be validated
      required: true
      schema:
        type: string
    labelId:
      name: labelId
      in: path
      description: |
        Label UUID
      required: true
      schema:
        type: string
    policyId:
      name: policyId
      in: path
      description: |
        Thorttle policy UUID
      required: true
      schema:
        type: string
    ruleId:
      name: ruleId
      in: path
      description: |
        Custom rule UUID
      required: true
      schema:
        type: string
    applicationId:
      name: applicationId
      in: path
      description: |
        Application UUID
      required: true
      schema:
        type: string
    conditionId:
      name: conditionId
      in: path
      description: |
        Blocking condition identifier
      required: true
      schema:
        type: string
    Accept:
      name: Accept
      in: header
      description: |
        Media types acceptable for the response. Default is application/json.
      schema:
        type: string
        default: application/json
    Content-Type:
      name: Content-Type
      in: header
      description: |
        Media type of the entity in the body. Default is application/json.
      required: true
      schema:
        type: string
        default: application/json
    If-None-Match:
      name: If-None-Match
      in: header
      description: >
        Validator for conditional requests; based on the ETag of the formerly
        retrieved

        variant of the resource (Will be supported in future).
      schema:
        type: string
    If-Modified-Since:
      name: If-Modified-Since
      in: header
      description: >
        Validator for conditional requests; based on Last Modified header of the

        formerly retrieved variant of the resource (Will be supported in
        future).
      schema:
        type: string
    If-Match:
      name: If-Match
      in: header
      description: >
        Validator for conditional requests; based on ETag (Will be supported in
        future).
      schema:
        type: string
    If-Unmodified-Since:
      name: If-Unmodified-Since
      in: header
      description: >
        Validator for conditional requests; based on Last Modified header (Will
        be supported in future).
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: |
        Maximum size of resource array to return.
      schema:
        type: integer
        default: 25
    offset:
      name: offset
      in: query
      description: |
        Starting point within the complete list of items qualified.
      schema:
        type: integer
        default: 0
    mediationPolicyId:
      name: mediationPolicyId
      in: path
      description: |
        Mediation policy Id
      required: true
      schema:
        type: string
    user:
      name: user
      in: query
      description: |
        username of the application creator
      required: false
      schema:
        type: string
    workflowReferenceId-Q:
      name: workflowReferenceId
      in: query
      description: |
        Workflow reference id
      required: true
      schema:
        type: string
    apiCategoryId:
      name: apiCategoryId
      in: path
      description: |
        API Category UUID
      required: true
      schema:
        type: string
    keyManagerId:
      name: keyManagerId
      in: path
      description: |
        Key Manager UUID
      required: true
      schema:
        type: string
  securitySchemes:
    OAuth2Security:
      type: oauth2
      flows:
        password:
          tokenUrl: 'https://localhost:9443/oauth2/token'
          scopes:
            openid: Authorize access to user details
            apim:admin: Manage all admin operations
            apim:tier_view: View throttling policies
            apim:tier_manage: Update and delete throttling policies
            apim:bl_view: View deny policies
            apim:bl_manage: Update and delete deny policies
            apim:mediation_policy_view: View mediation policies
            apim:mediation_policy_create: Create and update mediation policies
            apim:app_owner_change: Retrieve and manage applications
            'apim:app_import_export': Import and export applications related operations
            'apim:api_import_export': Import and export APIs related operations
            'apim:api_product_import_export': Import and export API Products related operations
            'apim:label_manage': Manage microgateway labels
            'apim:label_read': Retrieve microgateway labels
            'apim:monetization_usage_publish': Retrieve and publish Monetization related usage records
            'apim:api_workflow_approve': Manage workflows
            'apim:bot_data': Retrieve bot detection data
            'apim:tenantInfo': Retrieve tenant related information
            apim:tenant_theme_manage: Manage tenant themes
            'apim:admin_operations': Manage API categories
            'apim:admin_settings': Retrieve admin settings
            'apim:admin_alert_manage': Manage admin alerts
            'apim:api_workflow_view': Retrive workflow requests
            'apim:scope_manage': Manage scope


  schemas:
    Error:
      title: Error object returned with 4XX HTTP status
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int64
          description: Error code
        message:
          type: string
          description: Error message.
        description:
          type: string
          description: |
            A detail description about the error message.
        moreInfo:
          type: string
          description: |
            Preferably an url with more details about the error.
        error:
          type: array
          description: |
            If there are more than one error list them out.
            For example, list out validation errors by each field.
          items:
            $ref: '#/components/schemas/ErrorListItem'
    ErrorListItem:
      title: >-
        Description of individual errors that may have occurred during a
        request.
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: |
            Description about individual errors occurred
    ThrottlePolicy:
      discriminator:
        propertyName: policyName
      title: Generic Throttling Policy
      required:
        - policyName
      properties:
        policyId:
          type: string
          description: Id of policy
          example: 0c6439fd-9b16-3c2e-be6e-1086e0b9aa93
        policyName:
          type: string
          description: Name of policy
          example: Policy1
        displayName:
          type: string
          description: Display name of the policy
        description:
          type: string
          description: Description of the policy
        isDeployed:
          type: boolean
          default: false
          description: Indicates whether the policy is deployed successfully or not.
    AdvancedThrottlePolicyInfo:
      title: Advanced Throttling Policy
      required:
        - defaultLimit
      allOf:
        - $ref: '#/components/schemas/ThrottlePolicy'
        - properties:
            defaultLimit:
              $ref: '#/components/schemas/ThrottleLimit'
    AdvancedThrottlePolicy:
      title: Advanced Throttling Policy
      allOf:
        - $ref: '#/components/schemas/ThrottlePolicy'
        - required:
            - defaultLimit
          properties:
            defaultLimit:
              $ref: '#/components/schemas/ThrottleLimit'
            conditionalGroups:
              type: array
              description: >
                Group of conditions which allow adding different parameter
                conditions to the throttling limit.
              items:
                $ref: '#/components/schemas/ConditionalGroup'
    AdvancedThrottlePolicyList:
      title: Advanced Throttling Policy List
      properties:
        count:
          type: integer
          description: |
            Number of Advanced Throttling Policies returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/AdvancedThrottlePolicyInfo'
    ApplicationThrottlePolicy:
      title: Application Throttling Policy
      allOf:
        - $ref: '#/components/schemas/ThrottlePolicy'
        - required:
            - defaultLimit
          properties:
            defaultLimit:
              $ref: '#/components/schemas/ThrottleLimit'
    ApplicationThrottlePolicyList:
      title: Application Level Throttling Policy List
      properties:
        count:
          type: integer
          description: |
            Number of Application Throttling Policies returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationThrottlePolicy'
    SubscriptionThrottlePolicy:
      title: Subscription Throttling Policy
      allOf:
        - $ref: '#/components/schemas/ThrottlePolicy'
        - $ref: '#/components/schemas/GraphQLQuery'
        - required:
            - defaultLimit
          properties:
            defaultLimit:
              $ref: '#/components/schemas/ThrottleLimit'
            monetization:
              $ref: '#/components/schemas/MonetizationInfo'
            rateLimitCount:
              type: integer
              default: 0
              description: Burst control request count
              example: 10
            rateLimitTimeUnit:
              type: string
              description: Burst control time unit
            customAttributes:
              description: |
                Custom attributes added to the Subscription Throttling Policy
              type: array
              items:
                $ref: '#/components/schemas/CustomAttribute'
              additionalProperties:
                type: string
              example: {}
            stopOnQuotaReach:
              type: boolean
              default: false
              description: >
                This indicates the action to be taken when a user goes beyond
                the allocated quota. If checked, the user's requests will be
                dropped. If unchecked, the requests will be allowed to pass
                through.
            billingPlan:
              type: string
              description: >
                define whether this is Paid or a Free plan. Allowed values are
                FREE or COMMERCIAL.
            permissions:
              $ref: '#/components/schemas/SubscriptionThrottlePolicyPermission'
    SubscriptionThrottlePolicyPermission:
      title: SubscriptionThrottlePolicyPermission
      required:
        - permissionType
        - roles
      properties:
        permissionType:
          type: string
          enum:
            - ALLOW
            - DENY
          example: deny
        roles:
          type: array
          items:
            type: string
          example:
            - Internal/everyone
    GraphQLQuery:
      title: GraphQL Query
      properties:
        graphQLMaxComplexity:
          type: integer
          description: Maximum Complexity of the GraphQL query
          example: 400
        graphQLMaxDepth:
          type: integer
          description: Maximum Depth of the GraphQL query
          example: 10
    SubscriptionThrottlePolicyList:
      title: Subscription Level Throttling Policy List
      properties:
        count:
          type: integer
          description: |
            Number of Subscription Throttling Policies returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionThrottlePolicy'
    CustomRule:
      title: Custom Rule
      allOf:
        - $ref: '#/components/schemas/ThrottlePolicy'
        - required:
            - siddhiQuery
            - keyTemplate
          properties:
            siddhiQuery:
              type: string
              description: Siddhi query which represents the custom throttling policy
              example: >
                FROM RequestStream\nSELECT userId, ( userId ==
                'admin@carbon.super' ) AS isEligible ,
                str:concat('admin@carbon.super','') as throttleKey\nINSERT INTO
                EligibilityStream; \n\nFROM
                EligibilityStream[isEligible==true]#throttler:timeBatch(1 min)
                \nSELECT throttleKey, (count(userId) >= 10) as isThrottled,
                expiryTimeStamp group by throttleKey \nINSERT ALL EVENTS into
                ResultStream;
            keyTemplate:
              type: string
              description: >-
                The specific combination of attributes that are checked in the
                policy.
              example: $userId
    CustomRuleList:
      title: Custom Rule List
      properties:
        count:
          type: integer
          description: |
            Number of Custom Rules returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/CustomRule'
    ConditionalGroup:
      title: Conditional Groups for Throttling
      required:
        - limit
        - conditions
      properties:
        description:
          type: string
          description: Description of the Conditional Group
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/ThrottleCondition'
          description: >
            Individual throttling conditions. They can be defined as either
            HeaderCondition, IPCondition, JWTClaimsCondition,
            QueryParameterCondition

            Please see schemas of each of those throttling condition in
            Definitions section.
          example: "[\n  {\n    \"type\": \"HEADERCONDITION\",\n    \"invertCondition\": false,\n    \"headerCondition\":\n    {\n      \"headerName\": \"Host\",\n      \"headerValue\": \"10.100.7.77\"\n    }\n\t},\n\t{\n    \"type\": \"IPCONDITION\",\n    \"invertCondition\": false,\n    \"ipCondition\":\n    {\n      \"ipConditionType\": \"IPSPECIFIC\",\n      \"specificIP\": \"10.100.1.22\",\n      \"startingIP\": null,\n      \"endingIP\": null\n    }\n\t},\n\t{\n    \"type\": \"QUERYPARAMETERCONDITION\",\n    \"invertCondition\": false,\n    \"queryParameterCondition\":\n    {\n      \"parameterName\": \"name\",\n      \"parameterValue\": \"admin\"\n    }\n\t},\n\t{\n    \"type\": \"JWTCLAIMSCONDITION\",\n    \"invertCondition\": true,\n    \"jwtClaimsCondition\":\n    {\n      \"claimUrl\": \"claimUrl0\",\n      \"attribute\": \"claimAttr0\"\n    }\n  }\n]\n"
        limit:
          $ref: '#/components/schemas/ThrottleLimit'
    ThrottleCondition:
      title: Throttling Conditions
      description: Conditions used for Throttling
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - HEADERCONDITION
            - IPCONDITION
            - JWTCLAIMSCONDITION
            - QUERYPARAMETERCONDITION
          description: >
            Type of the throttling condition. Allowed values are
            "HEADERCONDITION", "IPCONDITION", "JWTCLAIMSCONDITION"

            and "QUERYPARAMETERCONDITION".
        invertCondition:
          type: boolean
          default: false
          description: >
            Specifies whether inversion of the condition to be matched against
            the request.


            **Note:** When you add conditional groups for advanced throttling
            policies, this paramater should have the

            same value ('true' or 'false') for the same type of conditional
            group.
        headerCondition:
          $ref: '#/components/schemas/HeaderCondition'
        ipCondition:
          $ref: '#/components/schemas/IPCondition'
        jwtClaimsCondition:
          $ref: '#/components/schemas/JWTClaimsCondition'
        queryParameterCondition:
          $ref: '#/components/schemas/QueryParameterCondition'
    HeaderCondition:
      title: HTTP Header based throttling condition
      required:
        - headerName
        - headerValue
      properties:
        headerName:
          type: string
          description: Name of the header
        headerValue:
          type: string
          description: Value of the header
    IPCondition:
      title: IP based throttling condition
      required:
        - specificIP
      properties:
        ipConditionType:
          type: string
          enum:
            - IPRANGE
            - IPSPECIFIC
          description: >-
            Type of the IP condition. Allowed values are "IPRANGE" and
            "IPSPECIFIC"
        specificIP:
          type: string
          description: Specific IP when "IPSPECIFIC" is used as the ipConditionType
        startingIP:
          type: string
          description: Staring IP when "IPRANGE" is used as the ipConditionType
        endingIP:
          type: string
          description: Ending IP when "IPRANGE" is used as the ipConditionType
    JWTClaimsCondition:
      title: JWT claim attibute based throttling condition
      required:
        - claimUrl
        - attribute
      properties:
        claimUrl:
          type: string
          description: JWT claim URL
        attribute:
          type: string
          description: Attribute to be matched
    QueryParameterCondition:
      title: Query parameter based throttling condition
      required:
        - parameterName
        - parameterValue
      properties:
        parameterName:
          type: string
          description: Name of the query parameter
        parameterValue:
          type: string
          description: Value of the query parameter to be matched
    ThrottleLimitBase:
      title: Throttle Limit Base
      required:
        - timeUnit
        - unitTime
      properties:
        timeUnit:
          type: string
          description: 'Unit of the time. Allowed values are "sec", "min", "hour", "day"'
          example: min
        unitTime:
          type: integer
          default: 0
          description: Time limit that the throttling limit applies.
          example: 10
    ThrottleLimit:
      title: Throttle Limit
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - REQUESTCOUNTLIMIT
            - BANDWIDTHLIMIT
          description: >
            Type of the throttling limit. Allowed values are "REQUESTCOUNTLIMIT"
            and "BANDWIDTHLIMIT".

            Please see schemas of "RequestCountLimit" and "BandwidthLimit"
            throttling limit types in

            Definitions section.
          example: REQUESTCOUNTLIMIT
        requestCount:
          $ref: '#/components/schemas/RequestCountLimit'
        bandwidth:
          $ref: '#/components/schemas/BandwidthLimit'
    MonetizationInfo:
      title: API monetization details object
      required:
        - monetizationPlan
        - properties
      properties:
        monetizationPlan:
          type: string
          description: Flag to indicate the monetization plan
          enum:
            - FixedRate
            - DynamicRate
          example: FixedRate
        properties:
          type: object
          description: Map of custom properties related to each monetization plan
          additionalProperties:
            type: string
    BandwidthLimit:
      title: Bandwidth Limit object
      allOf:
        - $ref: '#/components/schemas/ThrottleLimitBase'
        - required:
            - dataAmount
            - dataUnit
          properties:
            dataAmount:
              type: integer
              format: int64
              description: Amount of data allowed to be transfered
              example: 1000
            dataUnit:
              type: string
              description: >-
                Unit of data allowed to be transfered. Allowed values are "KB",
                "MB" and "GB"
              example: KB
    RequestCountLimit:
      title: Request Count Limit object
      allOf:
        - $ref: '#/components/schemas/ThrottleLimitBase'
        - required:
            - requestCount
          properties:
            requestCount:
              type: integer
              format: int64
              description: Maximum number of requests allowed
              example: 1000
    BlockingCondition:
      title: Blocking Conditions
      description: Blocking Conditions
      required:
        - conditionType
        - conditionValue
      properties:
        conditionId:
          type: string
          description: Id of the blocking condition
          example: b513eb68-69e8-4c32-92cf-852c101363cf
        conditionType:
          type: string
          description: Type of the blocking condition
          example: IP
        conditionValue:
          type: object
          description: Value of the blocking condition
          example: '{"fixedIp":"192.168.1.1":"invert":false}'
        conditionStatus:
          type: boolean
          description: Status of the blocking condition
          example: true
    BlockingConditionList:
      title: Blocking Conditions List
      properties:
        count:
          type: integer
          description: |
            Number of Blocking Conditions returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/BlockingCondition'
    BlockingConditionStatus:
      title: Blocking Conditions Status
      description: Blocking Conditions Status
      required:
        - conditionStatus
      properties:
        conditionId:
          type: string
          description: Id of the blocking condition
          example: b513eb68-69e8-4c32-92cf-852c101363cf
        conditionStatus:
          type: boolean
          description: Status of the blocking condition
          example: true
    CustomAttribute:
      title: Name-Value pair
      required:
        - name
        - value
      properties:
        name:
          type: string
          description: Name of the custom attribute
          example: customAttr1
        value:
          type: string
          description: Value of the custom attribute
          example: value1
    mediationList:
      title: Mediation List
      properties:
        count:
          type: integer
          description: |
            Number of mediation sequences returned.
          example: 1
        next:
          type: string
          description: |
            Link to the next subset of sequences qualified.
            Empty if no more sequences are to be returned.
          example: ''
        previous:
          type: string
          description: |
            Link to the previous subset of sequences qualified.
            Empty if current subset is the first subset returned.
          example: ''
        list:
          type: array
          items:
            $ref: '#/components/schemas/MediationInfo'
    MediationInfo:
      title: MediationInfo
      required:
        - name
        - type
        - id
      properties:
        name:
          type: string
          example: json_fault.xml
        id:
          type: string
          example: 01234567-0123-0123-0123-012345678901
        type:
          type: string
          enum:
            - in
            - out
            - fault
          example: in
    Mediation:
      title: Mediation
      required:
        - name
        - type
        - config
      properties:
        id:
          type: string
          example: 01234567-0123-0123-0123-012345678901
        name:
          type: string
          example: json_fault.xml
        type:
          type: string
          enum:
            - in
            - out
            - fault
          example: in
        config:
          type: string
          example: >-
            <sequence xmlns="http://ws.apache.org/ns/synapse"
            name="log_in_message"> <log level="full"> <property
            name="IN_MESSAGE" value="IN_MESSAGE_21133232"/> </log> </sequence>
    ApplicationList:
      title: Application List
      properties:
        count:
          type: integer
          description: |
            Number of applications returned.
          example: 1
        next:
          type: string
          description: |
            Link to the next subset of resources qualified.
            Empty if no more resources are to be returned.
          example: /applications?limit=1&offset=2&user=
        previous:
          type: string
          description: |
            Link to the previous subset of resources qualified.
            Empty if current subset is the first subset returned.
          example: /applications?limit=1&offset=0&user=
        list:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationInfo'
    ApplicationInfo:
      title: Application info object with basic application details
      properties:
        applicationId:
          type: string
          example: 01234567-0123-0123-0123-012345678901
        name:
          type: string
          example: CalculatorApp
        owner:
          type: string
          example: admin
        status:
          type: string
          example: APPROVED
        groupId:
          type: string
          example: ''
    APIInfoList:
      title: API Info List
      properties:
        count:
          type: integer
          description: |
            Number of API Info objects returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/APIInfo'
    APIInfo:
      title: API info object with basic API details
      properties:
        name:
          type: string
          description: The name of the API.
          example: PizzaShackAPI
        version:
          type: string
          description: The version of the API
          example: 1.0.0
        provider:
          type: string
          description: The provider of the API
          example: admin
    Label:
      title: Label
      required:
        - name
      properties:
        id:
          type: string
          example: This is not mandatory.Auto generate by code
        name:
          type: string
          example: Public
        description:
          type: string
          example: Label to use for public Gateway
        accessUrls:
          type: array
          items:
            type: string
            example: 'http://localhost:9443/'
    LabelList:
      title: Label List
      properties:
        count:
          type: integer
          description: |
            Number of Labels returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/Label'
    PublishStatus:
      title: Usage publish status
      properties:
        status:
          type: string
          description: Status of the usage publish request
        message:
          type: string
          description: detailed message of the status
    MonetizationUsagePublishInfo:
      title: Usage publish status
      properties:
        state:
          type: string
          description: State of usage publish job
        status:
          type: string
          description: Status of usage publish job
        startedTime:
          type: string
          description: Timestamp of the started time of the Job
        lastPublsihedTime:
          type: string
          description: Timestamp of the last published time
    Workflow:
      title: workflow
      required:
        - status
      properties:
        status:
          description: >
            This attribute declares whether this workflow task is approved or
            rejected.
          type: string
          enum:
            - APPROVED
            - REJECTED
          example: APPROVED
        attributes:
          description: |
            Custom attributes to complete the workflow task
          type: object
          additionalProperties:
            type: string
          example: {}
        description:
          type: string
          example: Approve workflow request.
    TenantInfo:
      title: Tenant information
      type: object
      description: The tenant information of the user
      properties:
        username:
          type: string
          example: john
        tenantDomain:
          type: string
          example: carbon.super
        tenantId:
          type: integer
          example: -1234
    CustomUrlInfo:
      title: Custom url information
      type: object
      description: The custom url information of the tenant domain
      properties:
        tenantDomain:
          type: string
          example: carbon.super
        tenantAdminUsername:
          type: string
          example: john@foo.com
        enabled:
          type: boolean
          example: true
        devPortal:
          type: object
          properties:
            url:
              type: string
              example: 'http://example.com'
    APICategory:
      title: API Category
      required:
        - name
      properties:
        id:
          type: string
          example: 01234567-0123-0123-0123-012345678901
        name:
          type: string
          example: Finance
        description:
          type: string
          example: Finance related APIs
        numberOfAPIs:
          type: integer
          example: 1
    APICategoryList:
      title: API Category List
      properties:
        count:
          type: integer
          description: |
            Number of API categories returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/APICategory'
    FileInfo:
      title: File Information including meta data
      properties:
        relativePath:
          type: string
          description: >-
            relative location of the file (excluding the base context and host
            of the Admin API)
          example: api-categories/01234567-0123-0123-0123-012345678901/thumbnail
        mediaType:
          type: string
          description: media-type of the file
          example: image/jpeg
    Settings:
      title: Settings
      properties:
        scopes:
          type: array
          items:
            type: string
        keyManagerConfiguration:
          type: array
          items:
            properties:
              type:
                type: string
                example: default
              displayName:
                type: string
                example: default
              defaultConsumerKeyClaim:
                type: string
                example: azp
              defaultScopesClaim:
                type: string
                example: scope
              configurations:
                type: array
                items:
                  $ref: '#/components/schemas/KeyManagerConfiguration'
        analyticsEnabled:
          type: boolean
          description: To determine whether analytics is enabled or not
          example: false
    ScopeList:
      title: Scope Role Mapping List
      properties:
        count:
          type: integer
          description: |
            Number of scopes available for tenant.
          example: 60
        list:
          type: array
          items:
            $ref: '#/components/schemas/Scope'
    Scope:
      title: Scope Role
      properties:
        tag:
          type: string
          description: |
            Portal name.
          example: publisher
        name:
          type: string
          description: |
            Scope name.
          example: 'apim:api_publish'
        description:
          type: string
          description: |
            About scope.
          example: Publish API
        roles:
          type: array
          items:
            type: string
          description: |
            Roles for the particular scope.
          example:
            - admin
            - Internal/publisher
    KeyManagerWellKnownResponse:
      title: Key Manager Well-Known Response.
      properties:
        valid:
          type: boolean
          example: true
          default: false
        value:
          $ref: '#/components/schemas/KeyManager'
    KeyManager:
      title: Key Manager
      required:
        - name
        - type
      properties:
        id:
          type: string
          example: 01234567-0123-0123-0123-012345678901
        name:
          type: string
          example: WSO2 IS
        displayName:
          type: string
          description: |
            display name of Key Manager to  show in UI
          example: KeyManager1
        type:
          type: string
          example: IS
        description:
          type: string
          example: This is a key manager for Developers
        wellKnownEndpoint:
          description: |
            Well-Known Endpoint of Identity Provider.
          type: string
          example: ''
        introspectionEndpoint:
          type: string
          example: ''
        clientRegistrationEndpoint:
          type: string
          example: ''
        tokenEndpoint:
          type: string
          example: ''
        revokeEndpoint:
          type: string
          example: ''
        userInfoEndpoint:
          type: string
          example: ''
        authorizeEndpoint:
          type: string
          example: ''
        certificates:
          type: object
          properties:
            type:
              type: string
              enum:
                - JWKS
                - PEM
            value:
              type: string
        issuer:
          type: string
          example: ''
        scopeManagementEndpoint:
          type: string
          example: ''
        availableGrantTypes:
          type: array
          items:
            type: string
            example: client_credentials
        enableTokenGeneration:
          type: boolean
          example: true
        enableTokenEncryption:
          type: boolean
          example: false
          default: false
        enableTokenHashing:
          type: boolean
          example: false
          default: false
        enableMapOAuthConsumerApps:
          type: boolean
          example: false
          default: false
        enableOAuthAppCreation:
          type: boolean
          example: false
          default: false
        enableSelfValidationJWT:
          type: boolean
          example: true
          default: true
        claimMapping:
          type: array
          items:
            $ref: '#/components/schemas/ClaimMappingEntry'
        consumerKeyClaim:
          type: string
          example: azp
        scopesClaim:
          type: string
          example: scp
        tokenValidation:
          type: array
          items:
            $ref: '#/components/schemas/TokenValidation'
        enabled:
          type: boolean
          example: true
        additionalProperties:
          type: object
    KeyManagerInfo:
      title: Key Manager Info
      required:
        - name
        - type
      properties:
        id:
          type: string
          example: 01234567-0123-0123-0123-012345678901
        name:
          type: string
          example: WSO2 IS
        type:
          type: string
          example: IS
        description:
          type: string
          example: This is a key manager for Developers
        enabled:
          type: boolean
          example: true
    KeyManagerConfiguration:
      title: Key Manager Configuration
      properties:
        name:
          type: string
          example: consumer_key
        label:
          type: string
          example: Consumer Key
        type:
          type: string
          example: select
        required:
          type: boolean
          example: true
        mask:
          type: boolean
          example: true
        multiple:
          type: boolean
          example: true
        tooltip:
          type: string
          example: Entet username to connect to key manager
        default:
          type: object
          example: admin
        values:
          type: array
          items:
            type: object
    KeyManagerList:
      title: Key Manager List
      properties:
        count:
          type: integer
          description: |
            Number of Key managers returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/KeyManagerInfo'
    ClaimMappingEntry:
      title: Claim Mapping Configuration
      properties:
        remoteClaim:
          type: string
          example: 'http://idp.org/username'
        localClaim:
          type: string
          example: 'http://wso2.org/username'
    TokenValidation:
      title: Token handling Configuration
      properties:
        id:
          type: integer
        enable:
          type: boolean
          example: false
          default: true
        type:
          type: string
          enum:
            - REFERENCE
            - JWT
            - CUSTOM
        value:
          type: object
    ScopeSettings:
      title: Settings
      properties:
        name:
          type: string
    AlertTypesList:
      title: Alert Types List
      properties:
        count:
          type: integer
          description: The number of alerts
          example: 3
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/AlertType'
    AlertType:
      title: Alert Type
      properties:
        id:
          type: string
          description: The alert Id
          example: 1
        name:
          type: string
          description: The name of the alert.
          example: AbnormalRequestTime
    AlertsSubscription:
      title: Alerts Subscription
      properties:
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/AlertType'
        emailList:
          type: array
          items:
            type: string
            example: admin@wso2.com
    BotDetectionAlertSubscriptionList:
      title: Bot Detection Alert Subscription List
      properties:
        count:
          type: integer
          description: |
            Number of Bot Detection Alert Subscriptions returned.
          example: 3
        list:
          type: array
          items:
            $ref: '#/components/schemas/BotDetectionAlertSubscription'
    BotDetectionAlertSubscription:
      title: Bot Detection Alert Subscription
      required:
        - email
      properties:
        uuid:
          type: string
          description: UUID of the subscription
          example: 'urn:uuid:1ed6d2de-29df-4fed-a96a-46d2329dce65'
        email:
          type: string
          description: email
          example: abc@.com
    WorkflowList:
      title: WorkflowList
      properties:
        count:
          type: integer
          description: |
            Number of workflow processes returned.
          example: 1
        next:
          type: string
          description: |
            Link to the next subset of resources qualified.
            Empty if no more resources are to be returned.
          example: /workflows?limit=1&offset=2&user=
        previous:
          type: string
          description: |
            Link to the previous subset of resources qualified.
            Empty if current subset is the first subset returned.
          example: /workflows?limit=1&offset=0&user=
        list:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowInfo'
    WorkflowInfo:
      title: Workflow info object with basic workflow details
      properties:
        workflowType:
          type: string
          enum:
            - APPLICATION_CREATION
            - SUBSCRIPTION_CREATION
            - USER_SIGNUP
            - APPLICATION_REGISTRATION_PRODUCTION
            - APPLICATION_REGISTRATION_SANDBOX
            - APPLICATION_DELETION
            - API_STATE
            - SUBSCRIPTION_DELETION
            - SUBSCRIPTION_UPDATE
          example: APPLICATION_CREATION
          description: |
            Type of the Workflow Request. It shows which type of request is it.
        workflowStatus:
          type: string
          enum:
            - APPROVED
            - CREATED
          example: APPROVED
          description: >
            Show the Status of the the workflow request whether it is approved
            or created.
        createdTime:
          type: string
          example: '2020-02-10 10:10:19.704'
          description: |
            Time of the the workflow request created.
        updatedTime:
          type: string
          example: '2020-02-10 10:10:19.704'
          description: |
            Time of the the workflow request updated.
        referenceId:
          type: string
          example: 5871244b-d6f3-466e-8995-8accd1e64303
          description: >
            Workflow external reference is used to identify the workflow
            requests uniquely.
        properties:
          type: object
        description:
          type: string
          example: >-
            Approve application [APP1] creation request from application creator
            - admin with throttling tier - 10MinPer
          description: >
            description is a message with basic details about the workflow
            request.
    WorkflowResponse:
      title: workflow Response
      required:
        - workflowStatus
      properties:
        workflowStatus:
          description: >
            This attribute declares whether this workflow task is approved or
            rejected.
          type: string
          enum:
            - CREATED
            - APPROVED
            - REJECTED
            - REGISTERED
          example: APPROVED
        jsonPayload:
          description: |
            Attributes that returned after the workflow execution
          type: string
    BotDetectionDataList:
      title: Bot Detection Data List
      properties:
        count:
          type: integer
          description: |
            Number of Bot Detection Data returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/BotDetectionData'
    BotDetectionData:
      title: Bot Detection Data
      properties:
        recordedTime:
          type: integer
          format: int64
          description: The time of detection
          example: 1591734138413
        messageID:
          type: string
          description: The message ID
          example: 'urn:uuid:1ed6d2de-29df-4fed-a96a-46d2329dce65'
        apiMethod:
          type: string
          description: The api method
          example: GET
        headerSet:
          type: string
          description: The header set
          example: '[Accept=*/*, Host=localhost:8243, User-Agent=curl/7.58.0]'
        messageBody:
          type: string
          description: The content of the message body
          example: >-
            <soapenv:Body
            xmlns:soapenv=\"http://www.w3.org/2003/05/soap-envelope\"/>
        clientIp:
          type: string
          description: The IP of the client
          example: 127.0.0.1
    RoleAliasList:
      title: Role alias list
      properties:
        count:
          type: integer
          description: The number of role aliases
          example: 3
        list:
          type: array
          items:
            $ref: '#/components/schemas/RoleAlias'
    RoleAlias:
      title: Role alias
      properties:
        role:
          type: string
          description: The original role
          example: Internal/subscriber
        aliases:
          type: array
          items:
            type: string
          description: The role mapping for role alias
          example:
            - Subscriber
            - Internal/subscriber
